<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JING BLOG</title>
  <subtitle>認真的人生很高級</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-02T08:45:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JING.HUANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebView 技术</title>
    <link href="http://yoursite.com/2017/04/10/2017-4-10-webview/"/>
    <id>http://yoursite.com/2017/04/10/2017-4-10-webview/</id>
    <published>2017-04-10T11:39:07.000Z</published>
    <updated>2017-06-02T08:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>WebView开发教程…持续整理中…</p>
</blockquote>
<h1 id="WebView-简介"><a href="#WebView-简介" class="headerlink" title="WebView 简介"></a>WebView 简介</h1><p>WebView 提供了四个配置类来定制 WebView 的各种行为及表现，分别是：</p>
<ol>
<li>WebSettings</li>
<li>WebViewClient</li>
<li>WebChromeClient</li>
<li>JavaScriptInterface</li>
</ol>
<a id="more"></a>
<h1 id="WebSettings"><a href="#WebSettings" class="headerlink" title="WebSettings"></a>WebSettings</h1><blockquote>
<p>Manages settings state for a WebView. When a WebView is first created, it obtains a set of default settings. These default settings will be returned from any getter call. A WebSettings object obtained from WebView.getSettings() is tied to the life of the WebView. If a WebView has been destroyed, any method call on WebSettings will throw an IllegalStateException</p>
</blockquote>
<h1 id="WebViewClient"><a href="#WebViewClient" class="headerlink" title="WebViewClient"></a>WebViewClient</h1><h1 id="WebChromeClient"><a href="#WebChromeClient" class="headerlink" title="WebChromeClient"></a>WebChromeClient</h1><h1 id="JavaScriptInterface"><a href="#JavaScriptInterface" class="headerlink" title="JavaScriptInterface"></a>JavaScriptInterface</h1><blockquote>
<p>Annotation that allows exposing methods to JavaScript. Starting from API level JELLY_BEAN_MR1 and above, only methods explicitly marked with this annotation are available to the Javascript code. See addJavascriptInterface(Object, String) for more information about it.</p>
</blockquote>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="https://jiandanxinli.github.io/2016-08-31.html" target="_blank" rel="external">WebView 概述</a></li>
<li><a href="https://developer.android.com/guide/webapps/webview.html" target="_blank" rel="external">Building Web Apps in WebView</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;WebView开发教程…持续整理中…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;WebView-简介&quot;&gt;&lt;a href=&quot;#WebView-简介&quot; class=&quot;headerlink&quot; title=&quot;WebView 简介&quot;&gt;&lt;/a&gt;WebView 简介&lt;/h1&gt;&lt;p&gt;WebView 提供了四个配置类来定制 WebView 的各种行为及表现，分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WebSettings&lt;/li&gt;
&lt;li&gt;WebViewClient&lt;/li&gt;
&lt;li&gt;WebChromeClient&lt;/li&gt;
&lt;li&gt;JavaScriptInterface&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="webview" scheme="http://yoursite.com/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>AS 自动化测试</title>
    <link href="http://yoursite.com/2017/03/28/2017-3-28-as-test/"/>
    <id>http://yoursite.com/2017/03/28/2017-3-28-as-test/</id>
    <published>2017-03-28T02:53:33.000Z</published>
    <updated>2017-05-31T06:24:54.158Z</updated>
    
    <content type="html"><![CDATA[<font color="#008B8B" face="微软雅黑">  </font>

<blockquote>
<p>本文主要讲解 ATSL 测试框架</p>
</blockquote>
<h1 id="JUnit-3-vs-Junit-4"><a href="#JUnit-3-vs-Junit-4" class="headerlink" title=" JUnit 3 vs Junit 4 "></a><font color="#008B8B" size="" face="微软雅黑"> JUnit 3 vs Junit 4 </font></h1><p>AndroidJUnitRunner是一个可以用来运行JUnit 3和JUnit 4样式的测试类的Test Runner，并且同时支持Espresso和UI Automator。这是对于之前的InstrumentationTestRunner的一个升级，如果你去查看Gradle文档中对于Testing配置的说明，会发现推荐的Test Runner为InstrumentationTestRunner。InstrumentationTestRunner只支持JUnit 3样式的测试用例，而我们在写Android测试用例时应该尽可能使用JUnit 4样式来实现。</p>
<a id="more"></a>
<p>相对于Junit 3， JUnit 4有如下改进：</p>
<ol>
<li>在JUnit3中需要继承TestCase类，但在JUnit4中已经不需要继承TestCase</li>
<li>可以使用类似@Test, @Before, @After等注解来管理自己的测试方法。在JUnit3中需要覆盖TestCase中的setUp和tearDown方法，其中setUp方法会在测试执行前被调用以完成初始化工作，而tearDown方法则在结束测试结果时被调用，用于释放测试使用中的资源，而在JUnit4中，只需要在方法前加上@Before，@After</li>
<li>测试方法名不再需要以test开头。在JUnit3中对某个方法进行测试时，测试方法的命令是固定的，例如对addBook这个方法进行测试，需要编写名字为tetAddBook的测试方法，而在JUnit4中没有方法命令的约束，在方法的前面加上@Test,这就代表这个方法是测试用例中的测试方法</li>
<li>新的断言assertThat</li>
<li>@BeforeClass 和 @AfterClass 。在JUnit3，如果所有的test case仅调用一次setUp()和tearDown()需要使用TestSetup类</li>
<li>测试异常处理@Test(expected = DataFormatException.class)</li>
<li>设置超时@Test(timeout = 1000)</li>
<li>忽略测试@Ignore</li>
<li>支持对assert方法的static导入。</li>
<li>增加了一些Assert方法；</li>
</ol>
<p>使用 Junit 4 风格的 Espresso APIs 来编写的测试用例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(AndroidJUnit4.class)</div><div class="line"><span class="meta">@LargeTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityInstrumentationTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Rule</span></div><div class="line">    <span class="keyword">public</span> ActivityTestRule mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(</div><div class="line">            MainActivity.class);</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</div><div class="line">        onView(withText(<span class="string">"Say hello!"</span>)).perform(click());</div><div class="line">        onView(withId(R.id.textView)).check(matches(withText(<span class="string">"Hello, World!"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<font color="red" size="" face="微软雅黑">Junit 4支持以下注解来管理测试用例</font>

<ul>
<li><strong>@Before</strong>: 标识在运行测试方法之前运行的代码。可以支持同一个Class中有多个@Before，但是这些方法的执行顺序是随机的。该注解替代了JUnit 3中的setUp()方法。</li>
<li><strong>@After</strong>: 标识在运行测试方法结束之后运行的代码。可以在其中做一些释放资源的操作。该注解替代了JUnit 3中的tearDown()方法。</li>
<li><strong>@Test</strong>: 标识一个测试方法。一个测试类中可以有多个测试方法，每个测试方法需要用一个@Test注解来标识。</li>
<li><strong>@Rule</strong>: 简单来说，是为各个测试方法提供一些支持。具体来说，比如我需要测试一个Activity，那么我可以在@Rule注解下面采用一个ActivityTestRule，该类提供了对相应Activity的功能测试的支持。该类可以在@Before和@Test标识的方法执行之前确保将Activity运行起来，并且在所有@Test和@After方法执行结束之后将Activity杀死。在整个测试期间，每个测试方法都可以直接对相应Activity进行修改和访问。</li>
<li><strong>@BeforeClass</strong>: 为测试类标识一个static方法，在测试之前只执行一次。</li>
<li><strong>@AfterClass</strong>: 为测试类标识一个static方法，在所有测试方法结束之后只执行一次。</li>
<li><strong>@Test(timeout=<milliseconds>)</milliseconds></strong>: 为测试方法设定超时时间。</li>
</ul>
<h1 id="区别"><a href="#区别" class="headerlink" title=" 区别 "></a><font color="#008B8B" face="微软雅黑"> 区别 </font></h1><ul>
<li>Espresso 侧重于应用内测试 + 不支持 WebView</li>
<li>UiAutomator 支持 WebView，应用内测试也ok，但是 api 的优雅性不如 Espresso</li>
</ul>
<h1 id="Espresso-自动化测试"><a href="#Espresso-自动化测试" class="headerlink" title=" Espresso 自动化测试 "></a><font color="#008B8B" face="微软雅黑"> Espresso 自动化测试 </font></h1><p>Google 新退出的自动化测试框架，除了不支持 WebView，其它的测试功能都能很好的支持。</p>
<h2 id="获取-Context"><a href="#获取-Context" class="headerlink" title="获取 Context"></a>获取 Context</h2><p>Espresso 中获取 Context 是通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Rule</span></div><div class="line"><span class="keyword">public</span> ActivityTestRule&lt;MainActivity&gt; mActivityRule = <span class="keyword">new</span> ActivityTestRule&lt;&gt;(</div><div class="line">            MainActivity.class);</div><div class="line">Context context = mActivityRule.getActivity().getApplicationContext();</div></pre></td></tr></table></figure></p>
<p>测试用例是工程强相关的，上面的 MainActivity 测试工程的主 UI，ActivityTestRule 这个类提供了相应的 Activity 测试支持。</p>
<h2 id="常规-View-测试"><a href="#常规-View-测试" class="headerlink" title="常规 View 测试"></a>常规 View 测试</h2><p>例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeText_sameActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">      onView(withId(R.id.editTextUserInput)).perform(typeText(STRING_TO_BE_TYPED), closeSoftKeyboard());</div><div class="line">      onView(withId(R.id.changeTextBt)).perform(click());</div><div class="line">      onView(withId(R.id.textToBeChanged)).check(matches(withText(STRING_TO_BE_TYPED)));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p><a href="https://developer.android.com/reference/android/support/test/espresso/matcher/ViewMatchers.html" target="_blank" rel="external">ViewMachers</a></p>
<p>withId: 使用控件 ID 匹配一个 [Matcher]，具体的api见文档<br>withText: 使用 String 返回一个 Matcher</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Matcher&lt;View&gt; <span class="title">withId</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> id)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Matcher&lt;View&gt; <span class="title">withText</span><span class="params">(String text)</span></span>;</div></pre></td></tr></table></figure>
</li>
<li><p>onView: 使用一个 Matcher 查找一个 <a href="https://developer.android.google.cn/reference/android/support/test/espresso/ViewInteraction.html" target="_blank" rel="external">ViewInteraction</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewInteraction <span class="title">onView</span><span class="params">(<span class="keyword">final</span> Matcher&lt;View&gt; viewMatcher)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> ViewInteraction <span class="title">check</span><span class="params">(<span class="keyword">final</span> ViewAssertion viewAssert)</span></span>;  <span class="comment">// 配合 matches 来做校验操作</span></div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://developer.android.com/reference/android/support/test/espresso/action/ViewActions.html" target="_blank" rel="external">ViewActions 操作</a>  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ViewAction <span class="title">click</span><span class="params">()</span>  <span class="comment">// 点击事件</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ViewAction <span class="title">typeText</span><span class="params">(String stringToBeTyped)</span> <span class="comment">// 输入事件</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> ViewAction <span class="title">closeSoftKeyboard</span><span class="params">()</span> <span class="comment">// 关闭键盘</span></div><div class="line"><span class="keyword">public</span> ViewInteraction <span class="title">perform</span><span class="params">(<span class="keyword">final</span> ViewAction... viewActions)</span> <span class="comment">// 执行一系列的 viewActions 操作</span></div><div class="line"><span class="comment">// typeText 输入text</span></div><div class="line"><span class="comment">// closeSoftKeyboard() 关闭软键盘</span></div><div class="line"><span class="title">onView</span><span class="params">(withId(R.id.editText)</span>)</div><div class="line">                .<span class="title">perform</span><span class="params">(typeText(mValidStringToBeTyped)</span>, <span class="title">closeSoftKeyboard</span><span class="params">()</span>)</div><div class="line">                .<span class="title">check</span><span class="params">(matches(withText(mValidStringToBeTyped)</span>));</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="测试工程-vs-主工程"><a href="#测试工程-vs-主工程" class="headerlink" title="测试工程 vs 主工程"></a>测试工程 vs 主工程</h2><p>在写测试用例的过程，除了能通过 onView 获取到主工程中的 View 控件，这是一个 ViewInteraction 类型，它暴露的 api 接口有限，无法通过它来获取控件的内容，这个时候就需要其它方法了；比如我们需要获取 主工程中 TextView 或者 EditText 的内容等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此处入参是 String 类型，返回的是一个 Matcher</span></div><div class="line"><span class="function"><span class="keyword">static</span> Matcher&lt;View&gt; <span class="title">withHint</span><span class="params">(<span class="keyword">final</span> String substring)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> withHint(is(substring));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> Matcher&lt;View&gt; <span class="title">withHint</span><span class="params">(<span class="keyword">final</span> Matcher&lt;String&gt; stringMatcher)</span> </span>&#123;</div><div class="line">        checkNotNull(stringMatcher);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BoundedMatcher&lt;View, EditText&gt;(EditText.class) &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matchesSafely</span><span class="params">(EditText view)</span> </span>&#123;</div><div class="line">                <span class="keyword">final</span> CharSequence hint = view.getHint();</div><div class="line">                <span class="keyword">return</span> hint != <span class="keyword">null</span> &amp;&amp; stringMatcher.matches(hint.toString());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">describeTo</span><span class="params">(Description description)</span> </span>&#123;</div><div class="line">                description.appendText(<span class="string">"with hint: "</span>);</div><div class="line">                stringMatcher.describeTo(description);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>通过 Matcher，结合 check、matches 来一起达到验证的目的。<br>使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onView(withId(R.id.editText)).check(matches(HintMatcher.withHint(hintText)));</div></pre></td></tr></table></figure></p>
<h2 id="ListView-Adapter-测试"><a href="#ListView-Adapter-测试" class="headerlink" title="ListView Adapter 测试"></a>ListView Adapter 测试</h2><ul>
<li><p>View 滑动<br>这里只需要弄清楚一个 List 的滑动接口就好。  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataInteraction <span class="title">onRow</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="comment">// 滑动到value=str指定的item中</span></div><div class="line">        <span class="comment">// LongListActivity.ROW_TEXT 这个属性是在创建 Adapter 时对应子 View 的一个 id，后面的值是对应的 id 赋值</span></div><div class="line">        DataInteraction dataInteraction = onData(hasEntry(equalTo(LongListActivity.ROW_TEXT), is(str)));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            sleep(<span class="number">3000</span>);  <span class="comment">// 这里添加参数只是为了方便演示</span></div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dataInteraction;</div><div class="line"><span class="comment">//        return onData(hasEntry(equalTo(LongListActivity.ROW_TEXT), is(str)));</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>子 View 的点击</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 滑到  TEXT_ITEM_30 这一行 点击相应的 id 操作</span></div><div class="line">onRow(TEXT_ITEM_30).onChildView(withId(R.id.rowToggleButton)).perform(click());</div><div class="line"><span class="comment">// 滑到  TEXT_ITEM_30 这一行 找到相应的 View，判断 ToggleButton 点击态</span></div><div class="line">onRow(TEXT_ITEM_30).onChildView(withId(R.id.rowToggleButton)).check(matches(isChecked()));</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="异步测试"><a href="#异步测试" class="headerlink" title="异步测试"></a>异步测试</h2><p>实际测试过程中，对于比较耗时的操作进行操作，需要考虑异步问题，这里可以采用测试工程通过主动 sleep 来解决，但是这个操作本身不够友好，此时可以通过 IdlingResource 来处理。<br>这个接口类说明如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdlingResource</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//用于日志显示的名字，可随意取</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//是否是空闲状态</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIdleNow</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//注册变成空闲的回调</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerIdleTransitionCallback</span><span class="params">(ResourceCallback callback)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">//回调接口</span></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceCallback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransitionToIdle</span><span class="params">()</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里可以给一个简单的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleIdlingResource</span> <span class="keyword">implements</span> <span class="title">IdlingResource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span> <span class="keyword">private</span> <span class="keyword">volatile</span> ResourceCallback mCallback;</div><div class="line"></div><div class="line">    <span class="comment">// Idleness is controlled with this boolean.</span></div><div class="line">    <span class="keyword">private</span> AtomicBoolean mIsIdleNow = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIdleNow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mIsIdleNow.get();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerIdleTransitionCallback</span><span class="params">(ResourceCallback callback)</span> </span>&#123;</div><div class="line">        mCallback = callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets the new idle state, if isIdleNow is true, it pings the &#123;<span class="doctag">@link</span> ResourceCallback&#125;.</div><div class="line">     * <span class="doctag">@param</span> isIdleNow false if there are pending operations, true if idle.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdleState</span><span class="params">(<span class="keyword">boolean</span> isIdleNow)</span> </span>&#123;</div><div class="line">        mIsIdleNow.set(isIdleNow);</div><div class="line">        <span class="keyword">if</span> (isIdleNow &amp;&amp; mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            mCallback.··();</div><div class="line">        &#125;·</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过 IdlingResource 来完成异步测试需要三步：  </p>
<ol>
<li><p>在主工程中创建一个 IdlingResource，并暴露一个获取实例的方法供测试工程调用，可以使用注解 @VisibleForTesting  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@VisibleForTesting</span></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IdlingResource <span class="title">getIdlingResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIdlingResource == <span class="keyword">null</span>) &#123;</div><div class="line">            mIdlingResource = <span class="keyword">new</span> SimpleIdlingResource();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mIdlingResource;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在测试工程中调用上方法，将 IdlingResource 注册到系统中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册</span></div><div class="line"><span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerIdlingResource</span><span class="params">()</span> </span>&#123;</div><div class="line">     mIdlingResource = mActivityRule.getActivity().getIdlingResource();</div><div class="line">     <span class="comment">// To prove that the test fails, omit this call:</span></div><div class="line">     Espresso.registerIdlingResources(mIdlingResource);</div><div class="line"> &#125;</div><div class="line"><span class="comment">// 反注册</span></div><div class="line"><span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterIdlingResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mIdlingResource != <span class="keyword">null</span>) &#123;</div><div class="line">            Espresso.unregisterIdlingResources(mIdlingResource);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在主工程中调用下面两个方法完成耗时操作的标记  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">idlingResource.setIdleState(<span class="keyword">false</span>); <span class="comment">// 来阻塞测试线程  </span></div><div class="line">idlingResource.setIdleState(<span class="keyword">true</span>); <span class="comment">// 来放开测试线程</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>假设我们使用 processMessage 方法来处理一个耗时操作，内部使用handler，下面是示例代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(<span class="keyword">final</span> String message, <span class="keyword">final</span> DelayerCallback callback,</span></span></div><div class="line">            @Nullable <span class="keyword">final</span> SimpleIdlingResource idlingResource) &#123;</div><div class="line">        <span class="comment">// The IdlingResource is null in production.</span></div><div class="line">        <span class="keyword">if</span> (idlingResource != <span class="keyword">null</span>) &#123;</div><div class="line">            idlingResource.setIdleState(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Delay the execution, return message via callback.</span></div><div class="line">        Handler handler = <span class="keyword">new</span> Handler();</div><div class="line">        handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (callback != <span class="keyword">null</span>) &#123;</div><div class="line">                    callback.onDone(message);</div><div class="line">                    <span class="keyword">if</span> (idlingResource != <span class="keyword">null</span>) &#123;</div><div class="line">                        idlingResource.setIdleState(<span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, DELAY_MILLIS);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="Intent相关测试"><a href="#Intent相关测试" class="headerlink" title="Intent相关测试"></a>Intent相关测试</h2><blockquote>
<p>这里会作为一个专题重点来讲</p>
<ul>
<li>Base</li>
<li>Advance<br>比如 startActivityForResult 这种类型的跳转测试</li>
</ul>
</blockquote>
<h2 id="多窗口测试"><a href="#多窗口测试" class="headerlink" title="多窗口测试"></a>多窗口测试</h2><p>Android 系统允许多个 View 控件位于系统的最顶层目录上，只是层级不一样，这样会造成有的 View 控件被遮挡导致不可交互，那测试工程通过什么手段能知道当前是哪些 View 控件处理可交互的状态，哪些是不可交到状态呢。  </p>
<h1 id="UiAutomator-自动化测试"><a href="#UiAutomator-自动化测试" class="headerlink" title=" UiAutomator 自动化测试 "></a><font color="#008B8B" face="微软雅黑"> UiAutomator 自动化测试 </font></h1><p>这个提供了 Android 手机上应用间的自动化测试，它可以很方便的模拟人在使用手机过来中出现的各种操作，并提供了相关的验证方法；<br>UiAutomator 与 Espresso 框架有一个不同的地方在于获取 Context。</p>
<h2 id="InstrumentationRegistry"><a href="#InstrumentationRegistry" class="headerlink" title="InstrumentationRegistry"></a><a href="https://developer.android.com/reference/android/support/test/InstrumentationRegistry.html" target="_blank" rel="external"><em>InstrumentationRegistry</em></a></h2><p>这是一个暴露的注册实例，持有 instrumentation 运行的进程和参数，还提供了一种简便的方法调用 instrumentation, application context 和 instrumentation 参数。<br>它主要用来获取 Context 及 Instrumentation 实例。</p>
<blockquote>
<p>注意：自动化测试代码 跟 Android 工程代码实际上没有什么区别，所以在有 Context 的情况下，能做的事情很多，比如关闭打开 Wifi，启动 Activity 应用等等。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InstrumentationRegistry.getInstrumentation(); <span class="comment">// 可用于获取 UiDevice</span></div><div class="line">InstrumentationRegistry.getContext(); <span class="comment">// 获取 Context</span></div></pre></td></tr></table></figure>
<h2 id="UiDevice"><a href="#UiDevice" class="headerlink" title="UiDevice"></a><a href="https://developer.android.com/reference/android/support/test/uiautomator/UiDevice.html" target="_blank" rel="external"><em>UiDevice</em></a></h2><p>这个是 uiautomator 提供的一个操作设备的类，它可以模拟各种设备相关的操作，比如按击Home键，菜单栏等，它包含了大量的 API，具体可以参考上面的文档。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UiDevice mDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());</div></pre></td></tr></table></figure>
<h2 id="By-BySelector-Until"><a href="#By-BySelector-Until" class="headerlink" title="By + BySelector + Until"></a><a href="https://developer.android.com/reference/android/support/test/uiautomator/By.html" target="_blank" rel="external">By</a> + <a href="https://developer.android.com/reference/android/support/test/uiautomator/BySelector.html" target="_blank" rel="external">BySelector</a> + <a href="https://developer.android.com/reference/android/support/test/uiautomator/Until.html" target="_blank" rel="external">Until</a></h2><p>这是很实用的一组工具类，三者结合可以用来完成查找或修改及验证（Until类）功能，上面附有对应的文档，可以查阅API，下面介绍一下简单的使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Until.hasObject(By.pkg(pkgName).depth(<span class="number">0</span>)) <span class="comment">// 判断 pkgName app 是否在当前手机最上层</span></div><div class="line">Until.findObject(By.res(pkgName, <span class="string">"textToBeChanged"</span>)) <span class="comment">// 查找 pkgName 应用中 id 为 textToBeChanged 的组件</span></div></pre></td></tr></table></figure>
<h2 id="wait-判断"><a href="#wait-判断" class="headerlink" title="wait 判断"></a>wait 判断</h2><p>测试用例中用来的超时等待，比如我要判断当前某一个应用当前是否在最上层，并且可以设置超时时间，这个 wait的还会返回一个 Object 实体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mDevice.wait(Until.hasObject(By.pkg(launcherPackage).depth(<span class="number">0</span>)), <span class="number">5000</span>);</div><div class="line">mDevice.wait(Until.hasObject(By.pkg(pkgName).depth(<span class="number">0</span>)), <span class="number">5000</span>);</div></pre></td></tr></table></figure>
<p>下面这个理解一下，wait 操作返回一个 Object，然后获取这个 Object 的内容</p>
<blockquote>
<p><strong><em>该操作相比 mDevice.findObject，只是多加了一个超时等待</em></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UiObject2 changedText = mDevice.wait(</div><div class="line">                Until.findObject(By.res(BASIC_SAMPLE_PACKAGE, <span class="string">"textToBeChanged"</span>)),</div><div class="line">                <span class="number">500</span> );  </div><div class="line">assertThat(changedText.getText(), is(equalTo(<span class="string">"UiAutomator"</span>)));</div></pre></td></tr></table></figure>
<h2 id="findObject"><a href="#findObject" class="headerlink" title="findObject"></a>findObject</h2><p>该接口返回一个实体组件，然后再调用对应的方法，入参为包句，及 id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mDevice.findObject(By.res(BASIC_SAMPLE_PACKAGE, <span class="string">"editTextUserInput"</span>))</div><div class="line">                .setText(<span class="string">"UiAutomator"</span>);</div><div class="line">mDevice.findObject(By.res(BASIC_SAMPLE_PACKAGE, <span class="string">"activityChangeTextBtn"</span>))</div><div class="line">                .click();</div></pre></td></tr></table></figure></p>
<h2 id="assertThat-验证"><a href="#assertThat-验证" class="headerlink" title="assertThat 验证"></a>assertThat 验证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">assertThat(mDevice, notNullValue());</div><div class="line">assertThat(changedText.getText(), is(equalTo(<span class="string">"UiAutomator"</span>)));</div></pre></td></tr></table></figure>
<h1 id="check-方法"><a href="#check-方法" class="headerlink" title="check 方法"></a>check 方法</h1><p>这里罗列一些常用的check方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">check(matches(isDisplayed()));  <span class="comment">// 检测是否显示状态（可用于 TextView）</span></div><div class="line">check(matches(not(isDisplayed()))); <span class="comment">// 检测是否非显示状态</span></div><div class="line">check(doesNotExist());  <span class="comment">// 检测是否可见在当前屏</span></div><div class="line">check(matches(isChecked())); <span class="comment">// 检测 ToggleButton 是否点击</span></div></pre></td></tr></table></figure></p>
<h1 id="anyof-接口"><a href="#anyof-接口" class="headerlink" title="anyof 接口"></a>anyof 接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">onView(withId(R.id.editText)).check(</div><div class="line">                matches(</div><div class="line">                        HintMatcher.withHint(</div><div class="line">                                anyOf(</div><div class="line">                                        endsWith(COFFEE_ENDING),</div><div class="line">                                        endsWith(COFFEE_INVALID_ENDING)</div><div class="line">                                )</div><div class="line">                        )</div><div class="line">                )</div><div class="line">        );</div></pre></td></tr></table></figure>
<h1 id="Espresso-cheat-sheet"><a href="#Espresso-cheat-sheet" class="headerlink" title=" Espresso cheat sheet "></a><font color="#008B8B" face="微软雅黑"> Espresso cheat sheet </font></h1><p><img src="/images/201703/espresso-cheat-sheet-2.1.0.png" alt=""></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><a href="https://developer.android.com/training/testing/index.html" target="_blank" rel="external">Best Practices for Testing 官方指导说明</a></li>
<li><a href="https://developer.android.com/topic/libraries/testing-support-library/index.html" target="_blank" rel="external"><strong>测试支持库</strong>中文文档</a></li>
<li><a href="https://developer.android.com/reference/android/support/test/package-summary.html" target="_blank" rel="external">测试框架 API</a></li>
<li><a href="https://google.github.io/android-testing-support-library/" target="_blank" rel="external">Android Testing Support Library 测试框架</a></li>
<li><a href="https://google.github.io/android-testing-support-library/samples/index.html" target="_blank" rel="external">Android Testing Support Library Samples 测试DEMO</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;font color=#008B8B face=&quot;微软雅黑&quot;&gt;  &lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;本文主要讲解 ATSL 测试框架&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JUnit-3-vs-Junit-4&quot;&gt;&lt;a href=&quot;#JUnit-3-vs-Junit-4&quot; class=&quot;headerlink&quot; title=&quot; JUnit 3 vs Junit 4 &quot;&gt;&lt;/a&gt;&lt;font color=#008B8B size=&quot;&quot; face=&quot;微软雅黑&quot;&gt; JUnit 3 vs Junit 4 &lt;/font&gt;&lt;/h1&gt;&lt;p&gt;AndroidJUnitRunner是一个可以用来运行JUnit 3和JUnit 4样式的测试类的Test Runner，并且同时支持Espresso和UI Automator。这是对于之前的InstrumentationTestRunner的一个升级，如果你去查看Gradle文档中对于Testing配置的说明，会发现推荐的Test Runner为InstrumentationTestRunner。InstrumentationTestRunner只支持JUnit 3样式的测试用例，而我们在写Android测试用例时应该尽可能使用JUnit 4样式来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="android-test" scheme="http://yoursite.com/categories/android-test/"/>
    
    
      <category term="as" scheme="http://yoursite.com/tags/as/"/>
    
      <category term="自动化测试" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SVN 命令速查</title>
    <link href="http://yoursite.com/2017/03/14/2017-3-14-svn/"/>
    <id>http://yoursite.com/2017/03/14/2017-3-14-svn/</id>
    <published>2017-03-14T11:28:24.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SVN常用命令速查表  </p>
</blockquote>
<h1 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn checkout svn://192.168.1.1/pro/domain</div><div class="line">svn co path // 简写</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn update  // 将当前目录以及子目录下的所有文件都更新到最新版本</div><div class="line">svn update -r 200 test.java // 将test.java更新到版本200</div></pre></td></tr></table></figure>
<h1 id="本地代码回退"><a href="#本地代码回退" class="headerlink" title="本地代码回退"></a>本地代码回退</h1><p>修改过的东西没有递交，这种情况下revert会取消之前的修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn revert test.java</div></pre></td></tr></table></figure></p>
<p>如果是将路径path下面所有的代码取消修改，需要加上 -R 参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn revert -R path</div><div class="line">svn revert // 回退当前目录下的所有文件</div></pre></td></tr></table></figure></p>
<h1 id="线上代码回退"><a href="#线上代码回退" class="headerlink" title="线上代码回退"></a>线上代码回退</h1><p>如果改动的东西已经提交了，这个时候需要使用merge来处理<br>步骤如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">svn update                      // 确认代码最新</div><div class="line">svn <span class="built_in">log</span> test.java</div><div class="line">svn <span class="built_in">log</span> path                    // 通过<span class="built_in">log</span>命令获取版本号</div><div class="line">svn merge -r 20:10 test.java</div><div class="line">svn merge -r 20:10 path         // 合并修改到本地文件</div><div class="line">svn ci -m <span class="string">"rollback code"</span>       // 提交修改合并上传到线上</div></pre></td></tr></table></figure></p>
<h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>冲突发生时一般会有如下提示信息:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Conflict discovered <span class="keyword">in</span> file <span class="string">'app\app.iml'</span>.</div><div class="line">Select: (p) postpone, (df) show diff, (e) edit file, (m) merge,</div><div class="line">        (mc) my side of conflict, (tc) their side of conflict,</div><div class="line">        (s) show all options:</div></pre></td></tr></table></figure></p>
<p>相关的解释如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(p) postpone          暂时推后处理，我可能要和那个和我冲突的家伙商量一番</div><div class="line">(df) diff-full        把所有的修改列出来，比比看</div><div class="line">(e) edit              直接编辑冲突的文件</div><div class="line">(mc) mine-conflict    如果你很有自信可以只用你的修改，把别人的修改干掉</div><div class="line">(tc) theirs-conflict  底气不足，还是用别人修改的吧</div><div class="line">(s) show all options  显示其他可用的命令</div></pre></td></tr></table></figure></p>
<h1 id="移除冲突"><a href="#移除冲突" class="headerlink" title="移除冲突"></a>移除冲突</h1><p>当执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn update</div><div class="line">C test.java</div><div class="line">Updated to revision 31.</div></pre></td></tr></table></figure></p>
<p>此时工作区会产生三个新文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line">test.java</div><div class="line">test.java.mine</div><div class="line">test.java.r30</div><div class="line">test.java.r31</div></pre></td></tr></table></figure></p>
<p>当解决了test.java的冲突，运行svn resolved让你的工作拷贝知道你已经完成了所有事情。<br>然后再 commit。</p>
<p>当然也可以仅仅删除冲突的文件并且提交，但是 svn resolved 除了删除冲突文件，还修正了一些记录在工作拷贝管理区域的记录数据，推荐你使用这个命令。</p>
<h1 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn add test.java // 往版本库中添加文件</div><div class="line">svn commit -m <span class="string">"add test file to svn"</span> test.java  // 提交修改</div></pre></td></tr></table></figure>
<h1 id="加锁-解锁"><a href="#加锁-解锁" class="headerlink" title="加锁/解锁"></a>加锁/解锁</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn lock -m <span class="string">"lock test file"</span> test.java</div><div class="line">svn unlock test.java</div><div class="line">svn unlock path</div></pre></td></tr></table></figure>
<h1 id="查看文件目录状态"><a href="#查看文件目录状态" class="headerlink" title="查看文件目录状态"></a>查看文件目录状态</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn status // 查看当前目录下文件及子目录的状态，正常状态不显示</div><div class="line">svn status path // 查看path目录下文件及子目录的状态，正常状态不显示</div></pre></td></tr></table></figure>
<p>相关图标解释如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">?：不在svn的控制中；</div><div class="line">M：内容被修改；</div><div class="line">C：发生冲突；</div><div class="line">A：预定加入到版本库；</div><div class="line">K：被锁定</div></pre></td></tr></table></figure></p>
<p>加参数v后，显示版本号、修改人及文件路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">svn status -v path // 显示文件和子目录状态（显示所有文件状态）</div><div class="line">6514     6506 jingtalk     .</div><div class="line">6514     6481 jingtalk    androidTest</div><div class="line">6514     6481 jingtalk    androidTest\java</div><div class="line">6514     6481 jingtalk    androidTest\java\com</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>查找某类修改的情况，比如只查找修改的gradle文件，加上参数 “| grep gradle”</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">svn status | grep gradle</div><div class="line">M       Login\facebooklogin\build.gradle</div><div class="line">?       Samples\IMSDKSample\.gradle</div><div class="line">M       Samples\IMSDKSample\build.gradle</div><div class="line">M       Samples\IMSDKSample\gradle.properties</div></pre></td></tr></table></figure>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">svn delete svn://192.168.1.1/pro/domain/test.java -m <span class="string">"delete test file"</span> // 删除svn文件</div><div class="line">// 或者</div><div class="line">svn delete test.java</div><div class="line">svn ci -m <span class="string">"delete test file"</span></div><div class="line"></div><div class="line">svn del</div><div class="line">svn rm</div><div class="line">svn remove</div></pre></td></tr></table></figure>
<h1 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h1><p>显示这个文件或者目录的所有修改记录，及其版本号的变化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">log</span> path</div><div class="line">svn <span class="built_in">log</span> test.java</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>显示svn最近的5条日志，这个很有用</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">log</span> --limit 5</div><div class="line">svn <span class="built_in">log</span> <span class="_">-l</span> 5</div></pre></td></tr></table></figure>
<h1 id="查看文件详细信息"><a href="#查看文件详细信息" class="headerlink" title="查看文件详细信息"></a>查看文件详细信息</h1><p>显示这个文件或者目录的SVN地址、本地信息、版本、最近修改人及修改记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn info path</div><div class="line">svn info test.java</div></pre></td></tr></table></figure></p>
<h1 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h1><ul>
<li>对比本地版本与线上版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn diff path</div><div class="line">svn diff test.java</div></pre></td></tr></table></figure>
<p>如下，通过+/-号来区分修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ svn diff build.gradle</div><div class="line">Index: build.gradle</div><div class="line">===================================================================</div><div class="line">--- build.gradle        (revision 6514)</div><div class="line">+++ build.gradle        (working copy)</div><div class="line">@@ -50,7 +50,7 @@</div><div class="line">     leakCanaryVersion = <span class="string">'1.3.1'</span></div><div class="line"></div><div class="line">     // Third Channel Libraries</div><div class="line">-    facebookVersion = <span class="string">'4.6.0'</span></div><div class="line">+    facebookVersion = <span class="string">'4.20.0'</span></div><div class="line">     googleVersion = <span class="string">'8.1.0'</span></div><div class="line"></div><div class="line">     adjustVersion = <span class="string">"4.11.0"</span></div></pre></td></tr></table></figure></p>
<ul>
<li>对比两个版本之前的区别</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn diff -r 200:201 test.java</div></pre></td></tr></table></figure>
<h1 id="合并差异"><a href="#合并差异" class="headerlink" title="合并差异"></a>合并差异</h1><p>将两个版本之间的差异合并到当前文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn merge -r 200:205 test.java</div></pre></td></tr></table></figure></p>
<h1 id="SVN-帮助"><a href="#SVN-帮助" class="headerlink" title="SVN 帮助"></a>SVN 帮助</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">help</span></div><div class="line">svn <span class="built_in">help</span> commit</div></pre></td></tr></table></figure>
<h1 id="SVN-list"><a href="#SVN-list" class="headerlink" title="SVN list"></a>SVN list</h1><p>查看path路径下所有属于版本库的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">svn list path</div><div class="line">svn ls</div><div class="line"></div><div class="line">// 显示当前base目录子目录的svn情况</div><div class="line">svn ls base</div><div class="line">.gitignore</div><div class="line">base.iml</div><div class="line">build.gradle</div><div class="line">jni/</div><div class="line">libs/</div><div class="line">proguard-rules.pro</div><div class="line">src/</div></pre></td></tr></table></figure></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://wenku.baidu.com/view/511a7d29ed630b1c59eeb5f3.html?re=view" target="_blank" rel="external">SVN命令行模式的操作命令教程(各种SVN命令)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SVN常用命令速查表  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;下载代码&quot;&gt;&lt;a href=&quot;#下载代码&quot; class=&quot;headerlink&quot; title=&quot;下载代码&quot;&gt;&lt;/a&gt;下载代码&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;svn checkout svn://192.168.1.1/pro/domain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;svn co path // 简写&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 使用攻略</title>
    <link href="http://yoursite.com/2017/03/06/2017-3-6-gradle/"/>
    <id>http://yoursite.com/2017/03/06/2017-3-6-gradle/</id>
    <published>2017-03-06T02:56:48.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要讲解一下Gradle的使用方法及注意事项，方便查阅</p>
</blockquote>
<h1 id="gradle介绍"><a href="#gradle介绍" class="headerlink" title="gradle介绍"></a>gradle介绍</h1><p>Groovy会把脚本编译成groovy.lang.Script的子类。groovy.lang.Script是一个抽象类，它有一个抽象方法run(). 如果有一个脚本的文件名是Main，它的内容是：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println 'Hello from Groovy'</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>它编译后生成的类是：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Main extends groovy.lang.Script &#123;</div><div class="line">  def run() &#123;</div><div class="line">    println 'Hello from Groovy'</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void main(String[] args) &#123;</div><div class="line">    InvokerHelper.runScript(Main, args)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>脚本中的语句会成为run方法的实现。</p>
<p>Gradle脚本编译生成的类当然也继承自groovy.lang.Script，并同时实现了Gradle自己的script接口org.gradle.api.Script。</p>
<h1 id="gradle脚本build过程"><a href="#gradle脚本build过程" class="headerlink" title="gradle脚本build过程"></a>gradle脚本build过程</h1><p>Gradle脚本的build流程分为3个阶段：</p>
<ol>
<li><p>初始化阶段<br>Gradle支持单个和多个工程的编译。在初始化阶段，Gradle判断需要参与编译的工程，为每个工程创建一个Project对象，并建立工程之间的层次关系。这个阶段执行Settings脚本。</p>
</li>
<li><p>配置阶段<br>Gradle对上一步创建的Project对象进行配置。这个阶段执行Build脚本</p>
</li>
<li><p>执行阶段<br>Gradle执行选中的task。</p>
</li>
</ol>
<h1 id="settings-gradle"><a href="#settings-gradle" class="headerlink" title="settings.gradle"></a>settings.gradle</h1><p>这个文件是全局的项目配置文件，里面主要声明一些需要加入 gradle 的 module；<br>此处包含了所有参与工程编译的 Module。</p>
<p>用于初始化project树。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">include <span class="string">':app'</span>, <span class="string">':base'</span></div><div class="line">include <span class="string">':volley'</span></div><div class="line">include <span class="string">':wechatauth'</span></div></pre></td></tr></table></figure>
<h1 id="include语法"><a href="#include语法" class="headerlink" title="include语法"></a>include语法</h1><p>groovy允许省略语句结尾的分号，并允许在方法调用时省略括号。<br>下面两行代码等价。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include ':app', ':mylibrary'</div><div class="line">include(':app', ':mylibrary');</div></pre></td></tr></table></figure></p>
<p>初始化脚本的Script对象会有一个Project代理对象。在Script对象没有定义的属性和方法调用就会被转到Project对象。上面的语句实际上调用的是Project对象的include方法，该方法的原型如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void include(String[] projectPaths)</div></pre></td></tr></table></figure></p>
<p>这个方法将给定的工程添加到build中。<br>工程路径的格式是:<br>以一个可选的”:”的开始，它表示”:”前面有一个不需要名字的根工程；剩下的部分是以”:”分隔的工程名。<br>例如， “:app”中”:”的是可选的，它表示”:”前面有一个不需要名字的根工程。</p>
<p>运行”gradle projects”可以获得这个demo的project树:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Root project 'AndroidDemo'  //工程名</div><div class="line">+--- Project ':app'</div><div class="line">\--- Project ':modulename'</div></pre></td></tr></table></figure></p>
<h1 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h1><p>gradle的SDK和NDK环境变量配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">## This file is automatically generated by Android Studio.</div><div class="line"># Do not modify this file -- YOUR CHANGES WILL BE ERASED!</div><div class="line">#</div><div class="line"># This file should *NOT* be checked into Version Control Systems,</div><div class="line"># as it contains information specific to your local configuration.</div><div class="line">#</div><div class="line"># Location of the SDK. This is only used by Gradle.</div><div class="line"># For customization when using a Version Control System, please read the</div><div class="line"># header note.</div><div class="line">sdk.dir=E\:\\Android\\android-sdk-windows</div></pre></td></tr></table></figure></p>
<h1 id="gradle-properties"><a href="#gradle-properties" class="headerlink" title="gradle.properties"></a>gradle.properties</h1><p>设置gradle脚本中的参数，比如代理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Project-wide Gradle settings.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># For more details on how to configure your build environment visit</span></div><div class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/build_environment.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Specifies the JVM arguments used for the daemon process.</span></div><div class="line"><span class="comment"># The setting is particularly useful for tweaking memory settings.</span></div><div class="line"><span class="comment"># Default value: -Xmx1024m -XX:MaxPermSize=256m</span></div><div class="line"><span class="comment"># org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># When configured, Gradle will run in incubating parallel mode.</span></div><div class="line"><span class="comment"># This option should only be used with decoupled projects. More details, visit</span></div><div class="line"><span class="comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span></div><div class="line"><span class="comment"># org.gradle.parallel=true</span></div><div class="line"><span class="comment">#Thu Feb 23 20:37:17 CST 2017</span></div><div class="line">systemProp.https.proxyPort=8080</div><div class="line">systemProp.http.proxyHost=dev-proxy.oa.com</div><div class="line">org.gradle.jvmargs=-Xmx1536m</div><div class="line">systemProp.https.proxyHost=dev-proxy.oa.com</div><div class="line">systemProp.http.proxyPort=8080</div></pre></td></tr></table></figure></p>
<h1 id="build-gradle-wrapper-gradle-wrapper-propertites"><a href="#build-gradle-wrapper-gradle-wrapper-propertites" class="headerlink" title="build/gradle/wrapper/gradle-wrapper.propertites"></a>build/gradle/wrapper/gradle-wrapper.propertites</h1><p>声明了gradle的目录与下载路径以及当前项目使用的gradle版本，这些默认的路径我们一般不会更改的，有時候导入一个新项目，gradle版本不对，可以在这里修改。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#Mon Dec 28 10:00:20 PST 2015</span></div><div class="line">distributionBase=GRADLE_USER_HOME</div><div class="line">distributionPath=wrapper/dists</div><div class="line">zipStoreBase=GRADLE_USER_HOME</div><div class="line">zipStorePath=wrapper/dists</div><div class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip</div></pre></td></tr></table></figure></p>
<h1 id="build-gradle-project"><a href="#build-gradle-project" class="headerlink" title="build.gradle[project]"></a>build.gradle[project]</h1><p>这个文件是整个项目的gradle基础（全局）配置文件，内容主要包含了3个方面：  </p>
<ul>
<li>一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。</li>
<li>另一个是声明了android gradle plugin的版本。</li>
<li>allprojects:中定义的属性会被应用到所有 moudle 中，但是为了保证每个项目的独立性，我们一般不会在这里面操作太多共有的东西。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</div><div class="line"></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath 'com.android.tools.build:gradle:2.2.3'</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">task clean(type: Delete) &#123;</div><div class="line">    delete rootProject.buildDir</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  所有通过gradle导入的jar包都是从<a href="http://bintray.com/bintray/jcenter" target="_blank" rel="external">jcenter</a>这个中央仓库上扒下来的。<br>  如果你需要的jar包在这个网站上没有，那就无法通过gradle的方式来导入的。</p>
<h1 id="ext定义全局属性"><a href="#ext定义全局属性" class="headerlink" title="ext定义全局属性"></a>ext定义全局属性</h1><p>根目录的gradle文件，在module比较多的情况下，最好统一，可以在这个文件定义一些共用的属性，然后在子module中。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//全局配置</div><div class="line">ext &#123;</div><div class="line">    minSdkVersion =15</div><div class="line">    targetSdkVersion =24</div><div class="line">    compileSdkVersion =24</div><div class="line">    buildToolsVersion ="24.0.0"</div><div class="line">    versionCode =1</div><div class="line">    versionName="1.0"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在子Module的gradle文件中引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</div><div class="line">    buildToolsVersion  rootProject.ext.buildToolsVersion</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion rootProject.ext.minSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</div><div class="line">        versionCode rootProject.ext.versionCode</div><div class="line">        versionName rootProject.ext.versionName</div><div class="line">        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="ext定义全局属性列表"><a href="#ext定义全局属性列表" class="headerlink" title="ext定义全局属性列表"></a>ext定义全局属性列表</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    channelDespendencies = [</div><div class="line">        facebook: "com.facebook.android:facebook-android-sdk:$&#123;facebookVersion&#125;",</div><div class="line">        googleAuth: "com.google.android.gms:play-services-auth:$&#123;googleVersion&#125;",</div><div class="line">        googleGames: "com.google.android.gms:play-services-games:$&#123;googleVersion&#125;",</div><div class="line">        googleGCM : "com.google.android.gms:play-services-gcm:$&#123;googleVersion&#125;",</div><div class="line">        googleGCM : "com.google.android.gms:play-services-gcm:$&#123;googleVersion&#125;",</div><div class="line">        ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子module中引用如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(include: ['*.jar'], dir: 'libs')</div><div class="line">    compile rootProject.ext.channelDespendencies.facebook</div><div class="line">    compile project(':base')</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="def定义全局函数"><a href="#def定义全局函数" class="headerlink" title="def定义全局函数"></a>def定义全局函数</h1><p>在根目录的全局gradle文件中定义函数</p>
<blockquote>
<p>不包含在ext大标签下面</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">def releaseTime() &#123;</div><div class="line">    return new Date().format("yyyy-MM-dd-HH", TimeZone.getTimeZone("UTC"))</div><div class="line">&#125;</div><div class="line"></div><div class="line">def svnVersion(String url)&#123;</div><div class="line">    def svnUrl = "test";</div><div class="line">    String result =  "svn info --show-item last-changed-revision $&#123;svnUrl&#125;".execute().text</div><div class="line">    return Integer.parseInt((result.trim()!="")? result.trim() : "1")</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>子module引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion rootProject.ext.androidCompileSdkVersion</div><div class="line">    buildToolsVersion rootProject.ext.androidBuildToolsVersion</div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        minSdkVersion rootProject.ext.androidMinSdkVersion</div><div class="line">        targetSdkVersion rootProject.ext.androidTargetSdkVersion</div><div class="line">        versionCode rootProject.svnVersion("facebooklogin") // look here</div><div class="line">        versionName mVersionName</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="build-gradle-Module-app"><a href="#build-gradle-Module-app" class="headerlink" title="build.gradle[Module:app]"></a>build.gradle[Module:app]</h1><p>这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件，比如自动打包debug，release，beta等环境，签名，多渠道打包，混淆等操作都可以在这里面写。</p>
<h1 id="build-gradle-Module-xxx"><a href="#build-gradle-Module-xxx" class="headerlink" title="build.gradle[Module:xxx]"></a>build.gradle[Module:xxx]</h1><p>每一个Module都需要有一个gradle配置文件。</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://www.jianshu.com/p/20f6695a9bd5#" target="_blank" rel="external">Gradle语法及Build过程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要讲解一下Gradle的使用方法及注意事项，方便查阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;gradle介绍&quot;&gt;&lt;a href=&quot;#gradle介绍&quot; class=&quot;headerlink&quot; title=&quot;gradle介绍&quot;&gt;&lt;/a&gt;gradle介绍&lt;/h1&gt;&lt;p&gt;Groovy会把脚本编译成groovy.lang.Script的子类。groovy.lang.Script是一个抽象类，它有一个抽象方法run(). 如果有一个脚本的文件名是Main，它的内容是：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;println &#39;Hello from Groovy&#39;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>AS 中 Butter Knife 使用详解</title>
    <link href="http://yoursite.com/2017/01/18/2017-1-18-butterknife/"/>
    <id>http://yoursite.com/2017/01/18/2017-1-18-butterknife/</id>
    <published>2017-01-18T02:57:08.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>介绍开源注入框架 Butter Knife 的使用方法</p>
<ul>
<li>AUTHOR: <a href="https://github.com/jingtalk" target="_blank" rel="external">jingtalk</a></li>
<li>DEMO: <a href="https://github.com/jingtalk/Hello-ButterKnife" target="_blank" rel="external">jingtalk/Hello-ButterKnife</a></li>
</ul>
</blockquote>
<h1 id="Butter-Knife介绍"><a href="#Butter-Knife介绍" class="headerlink" title="Butter Knife介绍"></a>Butter Knife介绍</h1><p><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">官方Git地址</a><br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">官网使用说明</a><br>Android开发中大量的findViewById和点击事件，像初始view、设置view监听这样简单而重复的操作让人觉得特别麻烦，这个时候就有了相应的偷懒文案-依赖注入。<br>目前比较流行的两种 ButterKnife 和 Dagger:<br>而Dagger中View的注入写法非常困难或者难懂，这个时候 ButterKnife 诞生了，<br>所以直接叫 ButterKnife 为 findViewById 都是没有问题的。</p>
<a id="more"></a>
<p>Butter Knife的特点：</p>
<ol>
<li>强大的View绑定和Click事件处理功能，简化代码，提升开发效率</li>
<li>方便的处理Adapter里的ViewHolder绑定问题</li>
<li>运行时不会影响APP效率，使用配置方便</li>
<li>代码清晰，可读性强</li>
</ol>
<h1 id="AS配置"><a href="#AS配置" class="headerlink" title="AS配置"></a>AS配置</h1><p>在<strong>module</strong>的build.gradle文件中添加如下代码</p>
<blockquote>
<p>最新版本信息请在<a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">官网</a>使用说明中查询</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.jakewharton:butterknife:8.4.0'</span></div><div class="line">    annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.4.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即可；</p>
<h1 id="绑定View、资源"><a href="#绑定View、资源" class="headerlink" title="绑定View、资源"></a>绑定View、资源</h1><p>下面这些绑定操作在 <strong>ButterKnife.bind(this)</strong> 后执行相应id与view的绑定，要注意的是，这一行代码必须在 <strong>setContentView</strong> 之后，否则会有异常发生；</p>
<p>Butter Knife 支持下面这些绑定操作，对于View的绑定，相当于findViewById操作；对于资源绑定，相当于已经初始化，取值为对应的values资源 或者 图片文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// View绑定</span></div><div class="line"><span class="meta">@BindView</span>(R.id.tvWorld)</div><div class="line">TextView tvWorld;</div><div class="line"><span class="meta">@BindView</span>(R.id.tvChina)</div><div class="line">TextView tvChina;</div><div class="line"><span class="meta">@BindView</span>(R.id.tvShenZhen)</div><div class="line">TextView tvShenZhen;</div><div class="line"></div><div class="line"><span class="comment">// 资源绑定</span></div><div class="line"><span class="meta">@BindArray</span>(R.array.arrayTest)</div><div class="line">String[] arrays;</div><div class="line"></div><div class="line"><span class="meta">@BindColor</span>(R.color.colorTest)</div><div class="line"><span class="keyword">int</span> colorValue;</div><div class="line"></div><div class="line"><span class="meta">@BindString</span>(R.string.stringTest)</div><div class="line">String stringValue;</div><div class="line"></div><div class="line"><span class="meta">@BindBitmap</span>(R.mipmap.avator_one)</div><div class="line">Bitmap avatorOne;</div><div class="line"></div><div class="line"><span class="meta">@BindDrawable</span>(R.mipmap.avator_two)</div><div class="line">Drawable avatorTwo;</div><div class="line"></div><div class="line"><span class="meta">@BindBool</span>(R.bool.boolTest)</div><div class="line"><span class="keyword">boolean</span> bool;</div><div class="line"></div><div class="line"><span class="meta">@BindDimen</span>(R.dimen.dimenTest)</div><div class="line"><span class="keyword">int</span> dimen;  <span class="comment">// int (for pixel size) or float (for exact value) field</span></div><div class="line"></div><div class="line"><span class="meta">@BindInt</span>(R.integer.intTest)</div><div class="line"><span class="keyword">int</span> intValue;</div><div class="line"></div><div class="line"><span class="comment">// 可绑定 float 类型的 dimen 资源 - 待验证</span></div><div class="line"><span class="comment">//    @BindFloat(R.dimen.floatTest)</span></div><div class="line"><span class="comment">//    float floatValue;</span></div><div class="line"></div><div class="line"><span class="comment">// 批量绑定</span></div><div class="line"><span class="meta">@BindViews</span>(&#123;R.id.tvWorld, R.id.tvChina, R.id.tvShenZhen&#125;)</div><div class="line">List&lt;TextView&gt; tvList;</div><div class="line"></div><div class="line"><span class="meta">@BindView</span>(R.id.ivBitmap)</div><div class="line">ImageView ivBitmap;</div><div class="line"></div><div class="line"><span class="meta">@BindView</span>(R.id.ivDrawable)</div><div class="line">ImageView ivDrawable;</div></pre></td></tr></table></figure></p>
<p>使用情况如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"onCreate called, bool="</span> + bool + <span class="string">", dimen="</span> + dimen + <span class="string">", intValue="</span></div><div class="line">                + intValue + <span class="string">", stringValue="</span> + stringValue + <span class="string">", arrays="</span> + arrays.toString());</div><div class="line"></div><div class="line">        tvShenZhen.setText(stringValue);</div><div class="line">        tvShenZhen.setTextColor(colorValue);</div><div class="line"></div><div class="line">        tvList.get(<span class="number">0</span>).setText(arrays[<span class="number">0</span>]);</div><div class="line"></div><div class="line">        ivBitmap.setBackground(avatorTwo);</div><div class="line">        ivDrawable.setBackground(<span class="keyword">new</span> BitmapDrawable(avatorOne));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="绑定Fragment"><a href="#绑定Fragment" class="headerlink" title="绑定Fragment"></a>绑定Fragment</h1><p>在<strong>onCreateView</strong>中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R.id.id_title_left_btn)</div><div class="line">ImageButton mLeftMenu;</div><div class="line"></div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    View view = inflater.inflate(R.layout.fragment_title, container, <span class="keyword">false</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line"></div><div class="line">    mLeftMenu = (ImageButton) view.findViewById(R.id.id_title_left_btn);</div><div class="line">    mLeftMenu.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            Toast.makeText(getActivity(), "i am a imagebutton in TitleFragment!", Toast.LENGTH_LONG).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">*/</div><div class="line"></div><div class="line">    <span class="comment">// Fragment中的绑定操作</span></div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(R.id.id_title_left_btn)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        Toast.makeText(getActivity(), <span class="string">"i am a imagebutton in TitleFragment!"</span>, Toast.LENGTH_LONG).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="绑定Adapter"><a href="#绑定Adapter" class="headerlink" title="绑定Adapter"></a>绑定Adapter</h1><p>主要是创建ViewHolder的方式不一样，代码逻辑在getView中完成。<br>标准写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ImageView img;</div><div class="line">    <span class="keyword">public</span> TextView title;</div><div class="line">    <span class="keyword">public</span> TextView info;</div><div class="line">    <span class="keyword">public</span> Button viewBtn;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>标准用法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">        holder = <span class="keyword">new</span> ViewHolder();</div><div class="line">        convertView = mInflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line">        holder.img = (ImageView) convertView.findViewById(R.id.img);</div><div class="line">        holder.title = (TextView) convertView.findViewById(R.id.title);</div><div class="line">        holder.info = (TextView) convertView.findViewById(R.id.info);</div><div class="line">        holder.viewBtn = (Button) convertView.findViewById(R.id.view_btn);</div><div class="line">        convertView.setTag(holder);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        holder = (ViewHolder) convertView.getTag();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.img.setBackgroundResource((Integer) mData.get(position).get(<span class="string">"img"</span>));</div><div class="line">    holder.title.setText((String) mData.get(position).get(<span class="string">"title"</span>));</div><div class="line">    holder.info.setText((String) mData.get(position).get(<span class="string">"info"</span>));</div><div class="line">    holder.viewBtn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            showInfo();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Butter knife的写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolderBK</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.img)</div><div class="line">    ImageView img;</div><div class="line">    <span class="meta">@BindView</span>(R.id.title)</div><div class="line">    TextView title;</div><div class="line">    <span class="meta">@BindView</span>(R.id.info)</div><div class="line">    TextView info;</div><div class="line">    <span class="meta">@BindView</span>(R.id.view_btn)</div><div class="line">    Button viewBtn;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolderBK</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.view_btn)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        showInfo();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Butter knife的写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolderBK holder = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">        convertView = mInflater.inflate(R.layout.list_item, <span class="keyword">null</span>);</div><div class="line">        holder = <span class="keyword">new</span> ViewHolderBK(convertView);</div><div class="line">        convertView.setTag(holder);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        holder = (ViewHolderBK) convertView.getTag();</div><div class="line">    &#125;</div><div class="line">    holder.img.setBackgroundResource((Integer) mData.get(position).get(<span class="string">"img"</span>));</div><div class="line">    holder.title.setText((String) mData.get(position).get(<span class="string">"title"</span>));</div><div class="line">    holder.info.setText((String) mData.get(position).get(<span class="string">"info"</span>));</div><div class="line">    <span class="keyword">return</span> convertView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对比发现，会简洁很多。</p>
<h1 id="OnClick、OnLongClick绑定"><a href="#OnClick、OnLongClick绑定" class="headerlink" title="OnClick、OnLongClick绑定"></a>OnClick、OnLongClick绑定</h1><p>支持可变参数的函数，并能批量绑定处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnClick</span>(&#123;R.id.ivBitmap, R.id.ivDrawable&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHiToast</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.ivBitmap:</div><div class="line">            Toast.makeText(getApplicationContext(), <span class="string">"ivBitmap click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.ivDrawable:</div><div class="line">            Toast.makeText(getApplicationContext(), <span class="string">"ivDrawable click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(R.id.btnLogin)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">    Toast.makeText(getApplicationContext(), <span class="string">"doLogin click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnLongClick</span>(R.id.btnLogin)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doLogin</span><span class="params">(Button button)</span> </span>&#123;</div><div class="line">    button.setText(<span class="string">"Login update"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(R.id.btnCancel)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doCancel</span><span class="params">(Button button)</span> </span>&#123;</div><div class="line">    Toast.makeText(getApplicationContext(), <span class="string">"doCancel click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    button.setText(<span class="string">"Error"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 自定义View的话，绑定自己的监听，不需要指定 ID</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JingButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line">    <span class="meta">@OnClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="其它监听器绑定"><a href="#其它监听器绑定" class="headerlink" title="其它监听器绑定"></a>其它监听器绑定</h1><p>Butter Knife还支持下面这些监听器操作<br><img src="/images/201701/OnMethod.gif" alt=""></p>
<p>实际上，BK对该类型的回调函数的写法有一定的要求，如返回值或者参数等，这个具体问题具体对待，从直观的做法是直接看源码的注释，如下所示：<br><img src="/images/201701/readme.gif" alt=""></p>
<h1 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h1><p>默认情况下，如果找不到目标视图，则会抛出异常<br>使用 @Optional,存在即绑定，不存在即忽略，不抛异常<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.fab)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG)</div><div class="line">            .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="ButterKnife-findById-强转"><a href="#ButterKnife-findById-强转" class="headerlink" title="ButterKnife.findById()强转"></a>ButterKnife.findById()强转</h1><p>ButterKnife.findById()自动强转，第一个参数可为 View, Activity, Dialog，使用如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</div><div class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</div><div class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</div><div class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</div></pre></td></tr></table></figure></p>
<h1 id="Binding-Reset操作"><a href="#Binding-Reset操作" class="headerlink" title="Binding Reset操作"></a>Binding Reset操作</h1><p>Fragments 有比Avtivity更多的生命周期 ，如果需要在onCreateView中注入一个fragment，在onDestroyView中销毁它<br>Butter Knife 有一个reset 方法自动实现它<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 定义一个变量并通过bind操作获得返回值</span></div><div class="line"><span class="keyword">private</span> Unbinder unbinder;</div><div class="line"></div><div class="line"><span class="meta">@Nullable</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"></div><div class="line">    View view = inflater.inflate(R.layout.fragment_title, container, <span class="keyword">false</span>);</div><div class="line">    <span class="comment">// Fragment中的绑定操作</span></div><div class="line">    unbinder = ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroyView();</div><div class="line">    <span class="comment">// 解绑操作</span></div><div class="line">    unbinder.unbind();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="ButterKnife-apply使用"><a href="#ButterKnife-apply使用" class="headerlink" title="ButterKnife.apply使用"></a>ButterKnife.apply使用</h1><h1 id="Zelezny插件使用"><a href="#Zelezny插件使用" class="headerlink" title="Zelezny插件使用"></a>Zelezny插件使用</h1><p>如果还想偷懒的话，可以在AndroidStudio-&gt;File-&gt;Settings-&gt;Plugins-&gt;搜索Zelezny插件下载使用, 它可以快速生成对应组件的实例对象，不用手动写。<br>使用时，在要导入注解的Activity 或 Fragment 或 ViewHolder的layout资源代码上，右键—&gt;Generate—&gt;Generate ButterKnife Injections，然后就出现如图的选择框，在里面可以选择相应的事件并自动生成。<br><img src="/images/201701/zeleznyPlugin.gif" alt=""></p>
<h1 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h1><ol>
<li><a href="http://www.jianshu.com/p/b6fe647e368b" target="_blank" rel="external">绝对不容错过，ButterKnife使用详谈</a></li>
<li><a href="http://blog.csdn.net/itjianghuxiaoxiong/article/details/50177549" target="_blank" rel="external">ButterKnife使用详解</a></li>
<li><a href="http://www.cnblogs.com/mengdd/p/4595973.html" target="_blank" rel="external">ButterKnife基本使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍开源注入框架 Butter Knife 的使用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AUTHOR: &lt;a href=&quot;https://github.com/jingtalk&quot;&gt;jingtalk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DEMO: &lt;a href=&quot;https://github.com/jingtalk/Hello-ButterKnife&quot;&gt;jingtalk/Hello-ButterKnife&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Butter-Knife介绍&quot;&gt;&lt;a href=&quot;#Butter-Knife介绍&quot; class=&quot;headerlink&quot; title=&quot;Butter Knife介绍&quot;&gt;&lt;/a&gt;Butter Knife介绍&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot;&gt;官方Git地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;官网使用说明&lt;/a&gt;&lt;br&gt;Android开发中大量的findViewById和点击事件，像初始view、设置view监听这样简单而重复的操作让人觉得特别麻烦，这个时候就有了相应的偷懒文案-依赖注入。&lt;br&gt;目前比较流行的两种 ButterKnife 和 Dagger:&lt;br&gt;而Dagger中View的注入写法非常困难或者难懂，这个时候 ButterKnife 诞生了，&lt;br&gt;所以直接叫 ButterKnife 为 findViewById 都是没有问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="andoird-osl" scheme="http://yoursite.com/categories/andoird-osl/"/>
    
    
      <category term="butterknife" scheme="http://yoursite.com/tags/butterknife/"/>
    
  </entry>
  
  <entry>
    <title>问题汇总</title>
    <link href="http://yoursite.com/2017/01/12/2017-1-12-interview-problem/"/>
    <id>http://yoursite.com/2017/01/12/2017-1-12-interview-problem/</id>
    <published>2017-01-12T11:07:05.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>WearSport</strong></p>
</blockquote>
<h1 id="GPS打点数据爆表"><a href="#GPS打点数据爆表" class="headerlink" title="GPS打点数据爆表"></a>GPS打点数据爆表</h1><h1 id="打点采样优化"><a href="#打点采样优化" class="headerlink" title="打点采样优化"></a>打点采样优化</h1><h1 id="动画卡顿"><a href="#动画卡顿" class="headerlink" title="动画卡顿"></a>动画卡顿</h1><a id="more"></a>
<blockquote>
<p><strong>PhoneSport</strong></p>
</blockquote>
<h1 id="View绘制"><a href="#View绘制" class="headerlink" title="View绘制"></a>View绘制</h1><blockquote>
<p><strong>WatchMusicPlayer</strong></p>
</blockquote>
<h1 id="三方框架实现"><a href="#三方框架实现" class="headerlink" title="三方框架实现"></a>三方框架实现</h1><h1 id="第三方音乐适配"><a href="#第三方音乐适配" class="headerlink" title="第三方音乐适配"></a>第三方音乐适配</h1><h1 id="表盘控制"><a href="#表盘控制" class="headerlink" title="表盘控制"></a>表盘控制</h1><blockquote>
<p><strong>Unity3D</strong></p>
</blockquote>
<h1 id="NGUI"><a href="#NGUI" class="headerlink" title="NGUI"></a>NGUI</h1><h1 id="NetworkView"><a href="#NetworkView" class="headerlink" title="NetworkView"></a>NetworkView</h1><blockquote>
<p><strong>快鸟</strong></p>
</blockquote>
<h1 id="启动页优化"><a href="#启动页优化" class="headerlink" title="启动页优化"></a>启动页优化</h1><p><em>跳出率是指在只访问了入口页面（例如网站首页）就离开的访问量与所产生总访问量的百分比</em><br><a href="http://blog.csdn.net/qq_23547831/article/details/51541277" target="_blank" rel="external">启动页优化策略</a></p>
<h1 id="引导页优化"><a href="#引导页优化" class="headerlink" title="引导页优化"></a>引导页优化</h1><blockquote>
<p><strong> MIUI项目组</strong></p>
</blockquote>
<h1 id="Token刷新"><a href="#Token刷新" class="headerlink" title="Token刷新"></a>Token刷新</h1><h1 id="流量查询"><a href="#流量查询" class="headerlink" title="流量查询"></a>流量查询</h1><h1 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h1><h1 id="偷跑流量"><a href="#偷跑流量" class="headerlink" title="偷跑流量"></a>偷跑流量</h1><h1 id="加速效果不理想"><a href="#加速效果不理想" class="headerlink" title="加速效果不理想"></a>加速效果不理想</h1><blockquote>
<p><strong>秀吧</strong></p>
</blockquote>
<h1 id="音视频上行预研"><a href="#音视频上行预研" class="headerlink" title="音视频上行预研"></a>音视频上行预研</h1><h2 id="Android终端设备视频直播上行发布"><a href="#Android终端设备视频直播上行发布" class="headerlink" title="Android终端设备视频直播上行发布"></a>Android终端设备视频直播上行发布</h2><blockquote>
<p>方案1：视频采集 + RTMP</p>
</blockquote>
<p>视频采集方法可二选一， Android版本的RTMP协议有多种开源实现，常用的有下面三种：</p>
<p>RED5：比较主流开源实现，网上有对应的开源project实现 android-recorder，这个版本的实现要求客户端与服务器端的RTMP版本兼容，否则客户端在连接成功后在开始创建流的时候，服务端把连接断开了，这个已在我们自己的服务器上验证，是匹配的;</p>
<p>国内开源project中采用的 android-rtmp-client，它是上面red5的精简版，编码上没有前者这么麻烦，存在的问题同上;</p>
<p>国外收费的rtmpclient，申请注册码或者进行破解，这个已有牛人提供了破解教程，并且提供下载，可以直接使用，这个有待验证。</p>
<blockquote>
<p>方案2：视频采集 + ffmpeg + RTMP（待测）</p>
</blockquote>
<p>FFMPEG在linux、windows平台上运行良好，能进行视频采集，编解码、播放以及流化能力，但在Android平台，使用最多的还它的播放、编解码能力。而视频采集一般使用已介绍的二种方式，目前要探究的课题是在Android平台，如何通过ffmpeg来发布视频。</p>
<p>FFMPEG是支持RTMP协议的，所以在linux/windows平台能通过以下方式来发布视频，实现直播。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -t 10 <span class="_">-f</span> video4linux2 <span class="_">-s</span> 176*144 -r 8 -i /dev/video0 -vcodec h263 <span class="_">-f</span> rtp rtp://192.168.1.105:5060 &gt; /tmp/ffmpeg.sdp</div></pre></td></tr></table></figure></p>
<p>目前Android上的ffmpeg移植也有很多参考材料，但甚少提及其发布功能，这部分需要深入阅读ffmpeg的源码，才能看到其流化接口，然后再发布。</p>
<h2 id="视频采集"><a href="#视频采集" class="headerlink" title="视频采集"></a>视频采集</h2><p>前后摄像头可以正常切换，目前是通过前置摄像头来采集数据</p>
<blockquote>
<p>Camera + PreviewCallback（Interface）</p>
</blockquote>
<pre><code>所采集的视频数据一般在PreviewCallback 的实现函数中获取。
public void onPreviewFrame(byte[] data, Camera camera)
该data数据为YUV格式的原始视频帧数据，一般为YUV420SP，这里要完成 yuv-&gt;rgb-&gt;视频流的转化过程（这块儿的具体过程还并不非常清晰）
并且音视频数据是没有经过编码处理的，此处可以使用第三方编码库来处理，如果ffmpeg、或者x264、AAC编码后再发布
</code></pre><blockquote>
<p>Camera + MediaRecorder</p>
</blockquote>
<pre><code>通过MediaRecorder获取的视频数据是已经编码过后的数据，在获取视频数据之前可以指定音视频编码格式，输出格式
支持 本地存储 + 远程输出
</code></pre><h2 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h2><p>由于目前的Android秀吧终端是能进行视频下行直播的，用的是ffmpeg，关于播放，此处不考虑</p>
<h2 id="视频发布RTMP"><a href="#视频发布RTMP" class="headerlink" title="视频发布RTMP"></a>视频发布RTMP</h2><blockquote>
<p>方法1：开源red5</p>
</blockquote>
<p>demo1视频采集使用mediarecorder， 目前按照 RTMP协议，以下流程能正常走通</p>
<p>1&gt;Client→Server :发送一个与流媒体服务器建立连接的请求.<br>2&gt;Server→Client : 服务器确认建立连接<br>3&gt;Client→Server : 发送一个创建流的请求<br>4&gt;Server→Client :服务器确认流请求，并返回一个表示流的索引号.<br>5&gt;Client→Server :提交一个发布数据的请求<br>6&gt;Server→Client ：服务器确认数据发布请求<br>7&gt;Client→Server :发送视音频数据包(这些包在同一个频道(channel)并用流的索引号来唯一标识).  </p>
<p>问题：demo在完成视频录制以后，再将视频发到服务器，在上面的第7步中，视频发布以后，服务器的解包有问题，定位应该是RTMP视频打包有问题，目前想把这一整套流程走通。</p>
<p>后面再实时发包看看视频效果</p>
<blockquote>
<p>方法2：开源red5精简版 android-rtmp-client</p>
</blockquote>
<p>面临的问题同上</p>
<blockquote>
<p>方法3：rtmpclient破解版</p>
</blockquote>
<p>demo2视频采集使用 PreviewCallback， rtmp使用破解版的rtmpclient</p>
<p>1&gt; RTMP</p>
<p>2&gt; FFMPEG</p>
<blockquote>
<p><strong>Android机顶盒</strong></p>
</blockquote>
<h1 id="Setting、Framework定制"><a href="#Setting、Framework定制" class="headerlink" title="Setting、Framework定制"></a>Setting、Framework定制</h1><h1 id="Launcher开发、焦点框特效重绘、滑动延时、按键屏蔽"><a href="#Launcher开发、焦点框特效重绘、滑动延时、按键屏蔽" class="headerlink" title="Launcher开发、焦点框特效重绘、滑动延时、按键屏蔽"></a>Launcher开发、焦点框特效重绘、滑动延时、按键屏蔽</h1><h1 id="设备主控、界面提示框"><a href="#设备主控、界面提示框" class="headerlink" title="设备主控、界面提示框"></a>设备主控、界面提示框</h1><h1 id="升级、JAVA-C同步"><a href="#升级、JAVA-C同步" class="headerlink" title="升级、JAVA/C同步"></a>升级、JAVA/C同步</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WearSport&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;GPS打点数据爆表&quot;&gt;&lt;a href=&quot;#GPS打点数据爆表&quot; class=&quot;headerlink&quot; title=&quot;GPS打点数据爆表&quot;&gt;&lt;/a&gt;GPS打点数据爆表&lt;/h1&gt;&lt;h1 id=&quot;打点采样优化&quot;&gt;&lt;a href=&quot;#打点采样优化&quot; class=&quot;headerlink&quot; title=&quot;打点采样优化&quot;&gt;&lt;/a&gt;打点采样优化&lt;/h1&gt;&lt;h1 id=&quot;动画卡顿&quot;&gt;&lt;a href=&quot;#动画卡顿&quot; class=&quot;headerlink&quot; title=&quot;动画卡顿&quot;&gt;&lt;/a&gt;动画卡顿&lt;/h1&gt;
    
    </summary>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Android 应用启动时序图</title>
    <link href="http://yoursite.com/2017/01/11/2017-1-11-android-start/"/>
    <id>http://yoursite.com/2017/01/11/2017-1-11-android-start/</id>
    <published>2017-01-11T11:31:37.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android应用程序启动过程</p>
</blockquote>
<p><img src="/images/201701/Android.start.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android应用程序启动过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/201701/Android.start.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="framework" scheme="http://yoursite.com/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>类加载说明</title>
    <link href="http://yoursite.com/2017/01/08/2017-1-8-class-loader/"/>
    <id>http://yoursite.com/2017/01/08/2017-1-8-class-loader/</id>
    <published>2017-01-08T06:10:31.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>类加载器介绍<br><a id="more"></a></p>
</blockquote>
<p><img src="/images/201701/类加载器.png" alt="类加载器使用介绍"></p>
<blockquote>
<p>Dex文件格式</p>
</blockquote>
<p><img src="/images/201701/dexfile.png" alt="dex文件格式"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;类加载器介绍&lt;br&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="plugin" scheme="http://yoursite.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>KeyPoint 博文收录</title>
    <link href="http://yoursite.com/2016/12/26/2016-12-26-key-index/"/>
    <id>http://yoursite.com/2016/12/26/2016-12-26-key-index/</id>
    <published>2016-12-26T02:40:22.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>不重复造轮子，这里收录一些经典知识点的博文讲解</p>
</blockquote>
<h1 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h1><ul>
<li><a href="http://www.jianshu.com/p/cdf16cce4ed7#" target="_blank" rel="external">Android通用流行框架大全</a></li>
<li><a href="http://www.cnblogs.com/kissazi2/p/3931400.html" target="_blank" rel="external">Universal Image Loader原理</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083#toc_1" target="_blank" rel="external">RxJava 详解</a></li>
</ul>
<a id="more"></a>
<h1 id="View"><a href="#View" class="headerlink" title="View"></a>View</h1><ul>
<li><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20View%20%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92" target="_blank" rel="external">View 事件传递</a></li>
<li><a href="http://a.codekk.com/detail/Android/lightSky/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20View%20%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B" target="_blank" rel="external">View 绘制流程</a></li>
<li><a href="http://a.codekk.com/detail/Android/lightSky/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Android%20%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80" target="_blank" rel="external">Android 动画基础</a></li>
<li><a href="http://blog.csdn.net/androiddevelop/article/details/46632323" target="_blank" rel="external">ViewStub原理及用法</a></li>
</ul>
<h1 id="Acitivty"><a href="#Acitivty" class="headerlink" title="Acitivty"></a>Acitivty</h1><ul>
<li><a href="http://blog.csdn.net/shinay/article/details/7898492/" target="_blank" rel="external">Activity四种启动模式</a></li>
<li><a href="http://bbs.itcast.cn/thread-80202-1-1.html" target="_blank" rel="external">singleTask和singleInstance区别</a></li>
<li><a href="http://blog.csdn.net/u012481172/article/details/49658633" target="_blank" rel="external">Activity启动过程详解1</a></li>
<li><a href="http://blog.csdn.net/qinjuning/article/details/7277225" target="_blank" rel="external">Activity启动过程详解2</a></li>
<li><a href="https://jingtalk.github.io/2017/01/11/2017-1-11-android-start/" target="_blank" rel="external">Android应用启动时序图</a></li>
</ul>
<h1 id="进程-线程-保活"><a href="#进程-线程-保活" class="headerlink" title="进程/线程/保活"></a>进程/线程/保活</h1><ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577617&amp;idx=1&amp;sn=623256a2ff94641036a6c9eea17baab8&amp;scene=1&amp;srcid=0818EecQYYkaSkd5HD8WjDf8#rd" target="_blank" rel="external">进程保活方案</a></li>
<li><a href="http://www.jb51.net/article/74560.htm" target="_blank" rel="external">Android Service 保活</a></li>
<li><a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html" target="_blank" rel="external">Handler机制详解</a></li>
</ul>
<h1 id="IPC通讯"><a href="#IPC通讯" class="headerlink" title="IPC通讯"></a>IPC通讯</h1><ul>
<li><a href="http://www.w2bc.com/article/147723" target="_blank" rel="external">彻底了解Binder机制原理和底层实现</a></li>
</ul>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E6%B3%A8%E8%A7%A3%20Annotation" target="_blank" rel="external">Java 注解 Annotation</a></li>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Dagger 源码解析</a></li>
<li><a href="https://jingtalk.github.io/2017/01/18/2017-1-18-butterknife/" target="_blank" rel="external">Android Studio 中Butter Knife使用详解</a></li>
<li><a href="http://blog.csdn.net/geekpark/article/details/38867873" target="_blank" rel="external">ButterKnife和Dagger的简单比较</a></li>
<li><a href="http://blog.jobbole.com/71885/" target="_blank" rel="external">Dagger、RoboGuice和ButterKnife</a></li>
</ul>
<h1 id="反射、代理"><a href="#反射、代理" class="headerlink" title="反射、代理"></a>反射、代理</h1><ul>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5" target="_blank" rel="external">依赖注入说明</a></li>
<li><a href="http://a.codekk.com/detail/Android/Caij/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86" target="_blank" rel="external">Java动态代理1</a></li>
<li><a href="http://www.cnblogs.com/techyc/p/3455950.html" target="_blank" rel="external">Java动态代理2</a></li>
<li><a href="http://a.codekk.com/detail/Android/Mr.Simple/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20Java%20%E5%8F%8D%E5%B0%84%20Reflection" target="_blank" rel="external">Java反射说明</a></li>
</ul>
<h1 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h1><ul>
<li><a href="http://mogu.io/117-117" target="_blank" rel="external">蘑菇街Android组件与插件化1</a></li>
<li><a href="http://mogu.io/119-119" target="_blank" rel="external">蘑菇街Android组件与插件化2</a></li>
<li><a href="http://weishu.me/2016/01/28/understand-plugin-framework-overview/" target="_blank" rel="external">Android插件化原理解析-系列</a></li>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">Qihoo360 DroidPlugin</a></li>
<li><a href="http://blog.csdn.net/watertekhqx/article/details/51303109" target="_blank" rel="external">Android动态加载那些事儿</a></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/40283117" target="_blank" rel="external">DL动态加载框架技术文档</a></li>
<li><a href="https://jingtalk.github.io/2017/01/08/2017-1-8-class-loader/" target="_blank" rel="external">类加载说明-PathClassLoader/DexClassLoader</a></li>
<li><a href="http://blog.csdn.net/u010687392/article/details/47121729?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">插件化开发—动态加载技术加载已安装和未安装的apk - ClassLoader使用</a></li>
<li><a href="http://kaedea.com/2016/02/05/android-dynamical-loading-00-index/" target="_blank" rel="external">ANDROID 动态加载系列索引 - Kaedea</a></li>
<li><a href="http://kaedea.com/2016/02/07/android-dynamical-loading-02-classloader/" target="_blank" rel="external">CLASSLOADER 的工作机制 - Kaedea</a></li>
<li><a href="http://kaedea.com/2016/06/10/android-dynamical-loading-06-proxy-activity/" target="_blank" rel="external">插件化-代理 ACTIVITY 模式 - Kaedea</a></li>
<li><a href="http://kaedea.com/2016/06/14/android-dynamical-loading-07-dynamic-activity/" target="_blank" rel="external">插件化-动态创建 ACTIVITY 模式 - Kaedea</a></li>
<li><a href="http://blog.csdn.net/u010386612/article/category/6169715" target="_blank" rel="external">Android热补丁动态修复技术 - Altsuki</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823" target="_blank" rel="external">Android中的动态加载机制 - 尼古拉斯</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/41384667" target="_blank" rel="external">Android中插件开发篇之—类加载器 - 尼古拉斯</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/47679843" target="_blank" rel="external">Android中插件开发篇之—应用换肤原理解析 - 尼古拉斯</a></li>
<li><a href="http://blog.csdn.net/jiangwei0910410003/article/details/48104455" target="_blank" rel="external">Android中插件开发篇之—动态加载Activity(免安装运行程序) - 尼古拉斯</a></li>
</ul>
<h1 id="Android常识点"><a href="#Android常识点" class="headerlink" title="Android常识点"></a>Android常识点</h1><ul>
<li><a href="http://blog.csdn.net/i_lovefish/article/details/17719081" target="_blank" rel="external">App监控自身的崩溃</a></li>
<li><a href="http://blog.csdn.net/hdhd588/article/details/6739281" target="_blank" rel="external">APK安装过程及原理</a></li>
<li><a href="http://blog.csdn.net/wwj_748/article/details/50088959" target="_blank" rel="external">如何开发一个App</a></li>
<li><a href="http://weishu.me/2016/01/18/dive-into-asynctask/" target="_blank" rel="external">AsyncTask</a></li>
<li><a href="http://blog.csdn.net/boyupeng/article/details/49001215" target="_blank" rel="external">AsyncTask 使用和缺陷</a></li>
<li><a href="http://blog.csdn.net/Luoshengyang/article/list/4" target="_blank" rel="external">老罗的Android之旅</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/6685853" target="_blank" rel="external">Android应用程序的Activity启动过程</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/6747696" target="_blank" rel="external">Android应用程序进程启动过程的源代码分析</a></li>
<li><a href="http://www.jianshu.com/p/d791bbede02c#" target="_blank" rel="external">Android高工必备技能</a></li>
<li><a href="http://blog.csdn.net/t12x3456/article/details/40837287" target="_blank" rel="external">android-support-multidex解决Dex 65536</a></li>
<li><a href="http://blog.csdn.net/qq_23547831/article/details/51645787" target="_blank" rel="external">Android产品研发系列</a></li>
</ul>
<h1 id="Android开发规范"><a href="#Android开发规范" class="headerlink" title="Android开发规范"></a>Android开发规范</h1><ul>
<li><a href="http://blog.csdn.net/qq_23547831/article/details/51534013" target="_blank" rel="external">实用开发规范</a></li>
</ul>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul>
<li><a href="http://blog.csdn.net/cselmu9/article/details/51366946" target="_blank" rel="external">单例模式</a></li>
<li><a href="http://www.race604.com/java-double-checked-singleton/" target="_blank" rel="external">Java 单例真的写对了么?</a></li>
<li><a href="http://www.2cto.com/kf/201403/285767.html" target="_blank" rel="external">JAVA四种引用方式</a></li>
<li><a href="http://www.pigg.co/java-volatile.html" target="_blank" rel="external">java volatile详解</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="external">Java并发编程：volatile关键字解析</a></li>
<li><a href="http://www.cnblogs.com/GnagWang/archive/2011/02/27/1966606.html" target="_blank" rel="external">java synchronized详解</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_69735aa50100o23n.html" target="_blank" rel="external">java包类接口修饰符</a></li>
<li><a href="http://blog.csdn.net/zhangjg_blog/article/details/21486985" target="_blank" rel="external">Java Class文件格式讲解1</a></li>
<li><a href="http://blog.csdn.net/luanlouis/article/details/39892027" target="_blank" rel="external">Java Class文件格式讲解2</a></li>
<li><a href="http://www.blogjava.net/jiafang83/archive/2007/10/23/155412.html" target="_blank" rel="external">java值传递和引用传递</a></li>
</ul>
<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><ul>
<li><a href="http://blog.csdn.net/seu_calvin/article/details/52354964" target="_blank" rel="external">Android开发——JVM、Dalvik以及ART的区别</a></li>
<li><a href="http://blog.csdn.net/watermusicyes/article/details/50526814" target="_blank" rel="external">Dalvik和ART运行时环境的区别</a></li>
</ul>
<h1 id="Linux-C"><a href="#Linux-C" class="headerlink" title="Linux/C"></a>Linux/C</h1><ul>
<li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">字符编码通俗讲解</a></li>
<li><a href="http://www.cnblogs.com/pomp/archive/2007/10/19/930145.html" target="_blank" rel="external">堆与栈区别</a></li>
<li><a href="http://www.cnblogs.com/A_ming/archive/2010/04/13/1711395.html" target="_blank" rel="external">String、StringBuffer与StringBuilder之间区别</a></li>
<li><a href="http://www.cnblogs.com/mickole/articles/3659112.html" target="_blank" rel="external">C/C++程序编译过程详解</a></li>
</ul>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><ul>
<li><a href="http://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html" target="_blank" rel="external">HTTP协议详解</a></li>
<li><a href="http://www.blogjava.net/zjusuyong/articles/304788.html" target="_blank" rel="external">深入理解HTTP协议</a></li>
<li><a href="http://blog.csdn.net/sws9999/article/details/4433632" target="_blank" rel="external">HTTP应答状态</a></li>
<li><a href="http://www.webryan.net/2011/08/wiki-of-http-cookie/" target="_blank" rel="external">HTTP Cookie解读</a></li>
<li><a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">TCP三次握手四次挥手图解1</a></li>
<li><a href="http://blog.csdn.net/whuslei/article/details/6667471/" target="_blank" rel="external">TCP三次握手四次挥手讲解2</a></li>
<li><a href="http://www.ha97.com/3215.html" target="_blank" rel="external">OSI七层与TCP/IP五层网络架构</a></li>
</ul>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul>
<li><a href="http://blog.csdn.net/v_july_v/article/details/6543438" target="_blank" rel="external">结构之法算法之道 - july</a></li>
<li><a href="http://zhedahht.blog.163.com/blog/#m=0" target="_blank" rel="external">剑指offer - 何海涛</a></li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="external">牛客网</a></li>
<li><a href="https://jingtalk.github.io/2016/12/23/2016-12-23-arithmetic-sort/" target="_blank" rel="external">算法-排序</a></li>
<li><a href="https://jingtalk.github.io/2016/12/23/2016-12-23-arithmetic-linklist/" target="_blank" rel="external">算法-链表</a></li>
<li><a href="https://jingtalk.github.io/2016/12/23/2016-12-23-arithmetic-tree/" target="_blank" rel="external">算法-树</a></li>
<li><a href="https://jingtalk.github.io/2016/12/23/2016-12-23-arithmetic-other/" target="_blank" rel="external">算法-递归、栈、字符串</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不重复造轮子，这里收录一些经典知识点的博文讲解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开源库&quot;&gt;&lt;a href=&quot;#开源库&quot; class=&quot;headerlink&quot; title=&quot;开源库&quot;&gt;&lt;/a&gt;开源库&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/cdf16cce4ed7#&quot;&gt;Android通用流行框架大全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/kissazi2/p/3931400.html&quot;&gt;Universal Image Loader原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083#toc_1&quot;&gt;RxJava 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="index" scheme="http://yoursite.com/tags/index/"/>
    
  </entry>
  
  <entry>
    <title>大话设计模式</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-design-mode/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-design-mode/</id>
    <published>2016-12-23T13:11:32.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h1><ul>
<li>类：抽象类用斜体表示</li>
<li>接口：&lt;<interface>&gt;  或者棒棒糖表示法</interface></li>
<li>继承：空心三角形+实线</li>
<li>实现：空心三角形+虚线</li>
<li>关联：当一个类知道另一个类时，可以用关联，实线箭头</li>
<li>聚合：表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分，空心的菱形+实线箭头</li>
<li>合成：表示一种强的“拥有”关系，体现了严格的部分和整体关系，部分和整体的生命周期一样，实心的菱形+实心箭头</li>
<li>依赖：虚线箭头</li>
</ul>
<a id="more"></a>
<h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><p>社会化的分工越来越细，自然在软件设计方面也是如此，因此对象的创建和对象的使用分开也就成为了必然趋势。因为对象的创建会消耗掉系统的很多资源，所以单独对对象的创建进行研究，从而能够高效地创建对象就是创建型模式要探讨的问题。这里有6个具体的创建型模式可供研究，它们分别是：</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>如何去实例化对象的问题，考虑用一个单独的类来做这个创建实例的过程（该工厂类中多有switch或if结构来接受用户输入的参数，进而实例化不同的实例返回）<br>所有在用到简单工厂的地方，都可以考虑反射来去除switch或if，解决分支判断带来的耦合。（反射可以利用字符串来实例化对象，而变量是可以更换的 — 反射 + 配置文件）<br>Tips：新修改来时，除了创建必要的子类之外，还需要修改简单工厂类，对修改开放。不需要修改客户端（传入的参数改变而已）</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>FactoryMethod 定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。<br>与简单工厂的区别：简单工厂类派生了很多子工厂 ，每个工厂子类类（有共同的父类）对应于一个实例的初始化过程。因此原来在简单工厂类中switch和if结构被去除。只需要在客户端中创建指定的工厂来实例化指定的类即可。<br>Tips：工厂方法模式实现时，客户端需要决定实例化哪一个工厂来实现运算类，选择判断的问题还是存在的，只是工厂方法把简单工厂的内部逻辑判断移到了客户端代码来进行，你想加功能，本来是改工厂类的，而现在是修改客户端</p>
<h2 id="抽象工厂-方法模式"><a href="#抽象工厂-方法模式" class="headerlink" title="抽象工厂 方法模式"></a>抽象工厂 方法模式</h2><p>Abstract Factory 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类<br>与工厂方法的区别：每个工厂类（有共同的父类工厂）处理的对象多于一个时，即每个工厂子类中要实例化多于一个的对象时。<br>Tips：抽象工厂方法模式非常便于交换产品系统；客户端通过它们的抽象接口操作实例，产品的具体类名也被具体工厂的实现分离，不会出现在客户代码中</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>Singleton 保证一个类仅有一个实例，并提供一个访问它的全局访问点<br>所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示的构造方法，默认的构造方法就会失效。若把类的构造方法写成private的，那么外部程序就不能用new来实例化它了<br>Tips：因为Singleton类封装它的唯一实例，这样它可以严格控制客户怎样访问它以及何时访问它，简单地说就是对唯一实例的受控访问。</p>
<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>Builder 将一个复杂对象的构建与它的表示分离，使得同样的构造过程可以创建不同的表示<br>创建的过程是人稳定的，而具体创建的细节是不同的（小人 vs 胖小人），使用了该模式以后，用户只需要指定的需要创建的类型就可以得到他们，而具体建造的过程和细节就不需要知道了。<br>Tips：当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时适用，好处是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如何组装的，所以或需要改变一个产品的内部表示，只需要再定义一个具体的建造者就可以了。</p>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>Prototype 用原型实例指定创建对象的类型，并且通过拷贝这些原型创建新的对象（JAVA 与 .NET都有对应的接口实现）<br>从一个对象再创建另外一个可定制的对象，而且不需要知道任何创建的细节。<br>一般在初始化的信息不发生改变的情况下，克隆是最好的方法，这既隐藏了对象创建的细节，又对性能是大的提高。它相当于不用重新初始化对象，而是动态的获得对象的运行时的状态。<br>（浅复制：被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其它对象的引用都仍然指向原来的对象）<br>（深复制：与上面的区别在于，深复制把引用对象的变量指向复制过的新对象，而不是原有的被引用的对象）<br>Tips：当创建实例的过程非常昂贵时适用</p>
<!--
·    创建型
在解决了对象的创建问题之后，对象的组成以及对象之间的依赖关系就成了开发人员关注的焦点，因为如何设计对象的结构、继承和依赖关系会影响到后续程序的维护性、代码的健壮性、耦合性等。对象结构的设计很容易体现出设计人员水平的高低，这里有7个具体的结构型模式可供研究，它们分别是：
1.    外观模式
Facade 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使用这一子系统更加容易使用。
Tips：首先，在设计初期阶段，应该有意识的将不同的两个层分离；其次，在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，大多数模式使用时都会产生很多很小的类，此时增加外观Facade可以提供一个简单的接口，减少它们之间的依赖；第三，在维护一个遗留的大型系统时，可能这个系统已经非常难以维护了，此时可以为系统开发一个Facade类，来提供设计粗糙或高度复杂的遗留代码的比较清晰的接口，让新系统与Facade对象交互，Facade与遗留代码交互所有复杂的工作
2.    代理模式
Proxy 为其它对象提供一种代理以控制对这个对象的访问
Tips：远程代理/虚拟代理/安全代理/智能指引
3.    适配器模式
区别于  代理模式
Adapter 将一个类的接口转换成客户希望的另外一个接口。该模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作
系统的数据和行为都正确，但接口不符时，应该考虑适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。适配器主要应用于复用一些现存的类，但是接口又与复用环境要求不一致的情况。
类适配器（通过多重继承对一个接口与另一个接口进行匹配）/ 对象适配器（Java/.NET）
Tips：想使用一个已经存在的类，但如果它的接口，即它的方法和你的要求不相同时，就应该考虑用适配器模式（两个类所做的事情相同或相似，但是具有不同的接口时要使用它）--- 只有碰到无法改变原有设计和代码的情况时，才考虑适配。事后控制不如事中控制，事中控制不如事前控制。
4.    装饰模式
Decorator 动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式远比生成子类的更为灵活
如果只有一个ConcreteComponent类而没有抽象的Component类，那么Decorator类可以是ConcreteComponent的一个子类。同样道理，如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator的责任合并成一个类。
有时新加入的功能仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。而Decorator提供了一个非常好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象。因此，当需要执行特殊行为时，客户代码就可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象
Tips：把类中的装饰功能从类中搬移去除，这样可以简化原有的类（有效地把类的核心职责和装饰功能区分开，去除相关类中的重复的装饰逻辑）
5.    组合模式
Composite 将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性
透明方式：在Component中声明所有用来管理子对象的方法，其中包括Add、Remove等，这样实现Component接口的所有子类都具备了Add和Remove。这样做的好处就是叶节点和枝节点对于外界没有区别，它们具备完全一致的行为接口。但问题也很明显，因为Leaf类本身不具备Add()、Remove()方法的功能，所以实现它是没有意义的。
安全方式：在Component接口中不去声明Add和Remove方法，那么子类的Leaf也就不需要去实现它，而是在Component声明所有用来管理子类对象的方法，这样就不会出现上面的问题。不过由于不够透明，所以树叶和树枝将不具有相同的接口，客户端的调有需要做相应的判断，带来了不便。
Tips：需求中是体现部分与整体层次的结构，以及希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，就应该考虑用组合模式。
6.    桥接模式
Bridge 将抽象部分与它的实现部分分离，使它们都可以独立的变化（手机品牌和手机软件）
实现指的是抽象类和它的派生类用来实现自己的对象
【合成/聚合复用原则CARP】The Composite/Aggregate Reuse Principle 尽量使用合成/聚合，尽量不要使用继承
对象的继承关系在编译时就定义好了，所以无法在运行时改变从父类继承的实现，子类的实现与它的父类有非常紧密的依赖关系，以至于父类实现中的任何变化必然会导致子类发生变化。当你需要复用子类时，如果继承下来的实现不适合解决新的问题，则父类必须重写或被其它的更适合的类替换。这种依赖关系限制了灵活性并最终限制了复用性。
实现系统可能有多角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独自变化，减少它们之间的耦合。
优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上，这样类和类继承层次会保持在最小规模，并且不太可能增长为不可控制的庞然大物
7.    享元模式
区别于  原型模式
Flyweight 运用共享技术有效地支持大量细粒度的对象
在享元对象内部并且不会随环境改变而改变的共享部分，称为享元对象的内部状态；而随着环境改变而改变的，不可以共享的状态称为外部状态。
享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量细粒度的类实例来表示数据，如果能发现这些实例除了几个参数外其它基本上是相同的，那么如果能把那些参数移到类实例的外面，在方法调用时再将它们传递进来，这样就可以通过共享大副减少单个实例的数目。
享元模式Flyweight执行时需要的状态是有内部也可能有外部的，内部状态可以存储于ConcreteFlyweight对象之中，而外部对象则应该考虑由客户端存储或计算，调用时再传递进来。
其中FlyweightFactory会进行对象的创建，如果没有就创建再返回实例，如果已存在就返回现有实例。
Tips：如果一个应用程序使用了大量的对象，而且大量的这些对象造成了很大的存储开销时就应该考虑使用；还有就是对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象，此时可以考虑使用享元模式
·    行为型
在对象的结构和对象的创建问题都解决了之后，就剩下对象的行为问题了，如果对象的行为设计的好，那么对象的行为就会更清晰，它们之间的协作效率就会提高，这里有11个具体的行为型模式可供研究，它们分别是：
1.    模板方法模式
TemplateMethod 定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
模板方法模式是通过把不变行为搬移到超类，去除子类中的重复代码来体现它的优势 --- 提供了一个很好有代码复用平台
当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现。通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复的不变行为的纠缠
Tips：当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上的实现可能不同时，通常就该考虑模板方法模式。
2.    策略模式
Strategy 它定义了算法家族，分别封装起来，让它们之前可以互相替换，此模式让算法的变化，不会影响到使用算法的客户
面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类
封装变化点是面向对象的一种很重要的思维方式
策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少各种算法类与使用算法害之间的耦合。
优点：策略模式的 Strategy 类层次为 Context 定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法的公共功能；另一个优点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试
但是在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转移策略模式的 Context  对象。这本身并没有解除客户端需要选择判断的压力，而策略模式与简单工厂模式结合后，选择具体实现的职责也可以由 Context 来承担，这就最大化地减轻了客户端的职责。
Tips：策略模式就是用来封装算法的，但在实践中，发现可以用它来封装几乎任何类型的规则，只要在分析过程中听到需要在不同的时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性
3.    观察者模式（发布-订阅模式）Publish/Subscribe
Observer 定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察都对象，使它们能够自动更新自己
对于双向耦合的代码，可以将双方都抽象出一个父类接口出来，然后针对接口编程，去除依赖。
观察者模式所做的工作就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使得各自的变化都不会影响另一边的变化。
事件委托实现 --- 一种引用方法的类型，一旦为委托分配了方法，委托将与该方法具有完全相同的行为。委托可以看作是对函数的抽象，是函数的“类”，委托的实例将代表一个具体的函数（委托对象所搭载的所有方法都必须具有相同的原形和形式，即相同的参数列表和返回值类型）
Tips：当一个对象的改变需要同时改变其它对象（不需要知道有多少对象需要改变）的时候使用
4.    状态模式
State 当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类
面向对象设计其实就是希望做到代码的责任分解
状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类ConcreteState当中，可以把复杂的判断逻辑简化，从而消除庞大的条件分支语句，如此通过定义新的子类可以很容易地增加新的状态和转换。
Tips：当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式
5.    迭代器模式
Iterator 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示
foreach in 遍历（Java、.NET 框架中都有相关的接口支持）
迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可以让外部代码透明地访问集合内部的数据
Tips：当你需要访问一个聚集对象，而且不管这些对象是什么都需要遍历的时候，就应该考虑用迭代器模式；你需要对聚集有多种方式遍历时，可以考虑用迭代器模式；为遍历不同的聚集结构提供如开始、下一个、是否结束、当前哪一项等统一的接口
6.    命令模式
Command 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作
最关键的优点就是命令模式把请求一个操作的对象与知道怎么执行这一个操作的对象分割开，解决‘行为请求者’ 与 ‘行为实现者’ 之间的紧耦合
敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。如果不清楚一个系统是否需要命令模式，一般就不需要着急去实现它。事实上，在需要的时候通过重构实现这个模式并不困难，只有在真正需要如撤销/恢复操作等功能时，把原来的代码重构为命令模式才有意义。
Tips：第一，它能较容易地设计一个命令队列；第二，在需要的情况下，可以较容易地将命令记入日志；第三，允许接收请求的一方决定是否要否决请求；第四，可以容易的实现对请求的撤销和重做；第五，由于加进新的具体命令类不影响其他的类。因此增加新的具体命令类很容易。
7.    备忘录模式
Memento 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。
如果在某个系统中使用命令模式时，需要实现命令的撤销功能，那么命令模式可以使用备忘录模式来存储可撤销操作的状态，而且使用备忘录可以把复杂的对象内部信息对其它的对象屏蔽起来
要保存的细节给封装在了 Memento 中了，哪一天要更改保存的细节也不用影响客户端了。
Originator（发起人）：负责创建一个备忘录 Memento ，用以记录当前时刻它的内部状态
Memento（备忘录）：负责存储 Originator 对象的内部状态，并可防止 Originator 以外的其它对象访问备忘录 Memento
Caretaker（管理者）：负责保存好备忘录 Memento，不能对备忘录的内容进行操作或检查
缺点：角色状态需要完整存储到备忘录对象中，如果状态数据很大很多，那么在资源消耗上，备忘录对象会非常耗内存
Tips：Memento 模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator 可以根据保存的 Memento 信息还原到前一状态。
8.    中介者模式
Mediator 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互
Mediator 的出现减少了各个 Colleague 的耦合，使得可以独立地改变和复用各个 Colleague 类和 Mediator，由于 ConcreteMeadiator 控制了集中化，于是就把复杂性变为了中介者的复杂性，这就使得中介者变得比任何一个 ConcreteMeadiator 都复杂（计算器的各个控件之间的合作实现）
Tips：中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定制一个分布在多个类中的行为，而又不想生成太多子类的场合
9.    职责链模式
Chain of Responsibility 使多个对象都有机会处理请求，从而避免请求的发送都和接收者之间耦合关系。将这些对象连成一条链，并沿着这条链传递改请求，直到有一个对象处理它为止
当客户提交一个请求时，请求是沿链传递直至有一个 ConcreteHandler 对象负责处理它，这就使得接收者和发送者都没有对方的明确消息，且链中的对象自己也并不知道链的结构，结果是职责链可简化对象的相互连接，它们仅需要一个指向其后继者的引用，而不需保持它所有的候选接收者的引用
一个请求极有可能到了链的末端都得不到处理，或者因为没有正确配置而得不到处理，需要考虑全面。
Tips：首先，需要事先给每个 ConcreteHandler 设置它的后继者；其次，每个 ConcreteHandler 在处理请求时需要做出判断，是处理还是转移给后继者去处理；
10.    解释器模式
Interpreter 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子
优点：使用该模式，可以很容易地改变和扩展文法，因为该模式使用类来表示文法规则，你可使用继承来改变或扩展文法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写
缺点：解释器模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其它的技术如语法分析程序或编译器生成器来处理
Tips：如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题（搜索字符串等-正则表达式）；当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象语法树时，可使用 Interpreter 模式
11.    访问者模式
Visitor 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
采用双分派技术，完美体现了 开放-关闭原则（访问者的能力和复杂性是双刃剑，只有真正需要它时才考虑使用）
首先在客户端程序中将具体状态作为参数传递给“男人”类完成了一次分派，然后“男人”类调用作为参数的“具体状态”中的方法“男人反应”，同时将自己作为参数传递进去，这便完成了第二次分派。
双分派意味着得到执行的操作决定于请求的种类和两个接收者类型。‘接受’方法就是一个双分派的操作，它得到执行的操作不仅决定于‘状态’类的具体状态，还决定于它访问的‘人’的类别。
优点：增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者，访问者模式将有关的行为集中到一个访问都对象中
缺点：增加新的数据结构变得困难
Tips：访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化；访问者模式的目的是要把处理从数据结构中分离出来，如果一个系统有比较稳定的数据结构，又有易于变化的算法的话，使用访问者模式就是比较适合的，因为访问者模式使得算法操作的增加变得容易。反之，如果系统的数据结构对象易于变化，经常要有新的数据对象增加进来，就不适合使用访问者模式
·    单一职责原则（SRP）
Single Responsibility Principle 就一个类而言，应该仅有一个引起它变化的原因
如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会消弱或或者抑制这个类完成其它职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。
软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。
如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。
·    开放-关闭原则（OCP）
The Open-Closed Principle 是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改
两个特殊，一个是说“对于扩展是开放的（Open for extension）”，另一个是说“对于更改是封闭的（Closed for modification）”
怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢？ --- OCP给出了答案
无论模块是多么的‘封闭’，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪些变化封闭作出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。
在我们最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生的同类变化。
面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码  --- OCP的精神所在
我们希望的是在开发工作展开不久就知道可能发生的变化。查明可能发生的变化所等待的时间越长，要创建正常的抽象就越困难
开放-关闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。
·    依赖倒转原则 （DIP）
Dependence Inversion Principle
A. 高层模块不应该依赖低层模式。两个都应该依赖于抽象
B. 抽象不应该依赖细节。细节应该依赖于抽象。（针对接口编程，不要针对实现编程）
·    里氏代换原则（LSP）
Liskov Substitution Principle 子类开必须能够替换掉它们的父类
一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。
只有当子类可以替换掉父类，软件单位的功能不受影响时，父类才能真正被复用，而子类也能多在父类的基础上增加新的行为。由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。
依赖倒转其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要。如果编写时考虑的都是如何针对抽象编程而是不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计。
·    合成/聚合原则（CARP）
Composition/Aggregation Principle 尽量使用合成/聚合，尽量不要使用类继承
优先使用对象的合成/聚合将有助于保持每个类被封装，并被集中在单个任务上，这样类和类继承层次会保持在最小规模，并且不太可能增长为不可控制的庞然大物
·    迪米特法则（LoD）
最少知识原则 Law of Demeter，如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用
在类的结构设计上，每一个类都应当尽量降低成员的访问权限
迪米特法则其根本思想，是强调了类之间的耦合。类之间的耦合越弱，就越有利于复用，一个处在弱耦合的类被修改，不会对有有关系的类造成波及。 -->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UML&quot;&gt;&lt;a href=&quot;#UML&quot; class=&quot;headerlink&quot; title=&quot;UML&quot;&gt;&lt;/a&gt;UML&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;类：抽象类用斜体表示&lt;/li&gt;
&lt;li&gt;接口：&amp;lt;&lt;interface&gt;&amp;gt;  或者棒棒糖表示法&lt;/li&gt;
&lt;li&gt;继承：空心三角形+实线&lt;/li&gt;
&lt;li&gt;实现：空心三角形+虚线&lt;/li&gt;
&lt;li&gt;关联：当一个类知道另一个类时，可以用关联，实线箭头&lt;/li&gt;
&lt;li&gt;聚合：表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分，空心的菱形+实线箭头&lt;/li&gt;
&lt;li&gt;合成：表示一种强的“拥有”关系，体现了严格的部分和整体关系，部分和整体的生命周期一样，实心的菱形+实心箭头&lt;/li&gt;
&lt;li&gt;依赖：虚线箭头&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一般产品流程</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-pm-process/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-pm-process/</id>
    <published>2016-12-23T13:02:48.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载</p>
</blockquote>
<p>产品从无到有，从一个想法到雏形到上线的产品，都有个过程。不论是产品、运营、开发、测试等都有自己的职责和工作。很多公司都希望将自己的产品流程化，正规化，希望按照一定的流程走下去，想的是哪天哪个职位出现空缺了，直接找个合适的人可以顶替。同时也为以后的产品工作或项目进程都提供一个模版。特别是对于中小型公司来说，当没有UED，当没有产品相关流程时，产品是否能够按时完成，能否高质量的完成，成为很多产品经理和BOSS担忧的事情。<br><a id="more"></a></p>
<p>结合自己的产品经验，同时在不同的公司的经历，将产品流程规划分为8个阶段：立项阶段、设计阶段、开发阶段、测试阶段、上线阶段、磨合阶段、运营阶段、总结阶段。</p>
<h1 id="立项阶段"><a href="#立项阶段" class="headerlink" title="立项阶段"></a>立项阶段</h1><p>体现产品经理核心功能的阶段，对于产品需求确定，核心功能提炼。产品提出讨论，输出MRD，与技术、业务、资源的可用性，同时确定产品参与人员，沟通是产品经理的一项职能，如何将所有的参与人员集合一起共事，如何更有效的沟通，明确各自的职责。更希望将产品聚焦于可以满足80%用户需求的解决方案，而非20%的用户需求。</p>
<h1 id="设计阶段"><a href="#设计阶段" class="headerlink" title="设计阶段"></a>设计阶段</h1><p>设计阶段的首要任务就是将产品周期确认，周期是产品经理需与各部门人员配合确定的。产品、交互、UI、视觉、开发、测试等人员在设计阶段更多的是个溶合过程，信息的溶合，目的的明确，同时对于各自工作的明确。产品经理在做出PRD后更多的是与其他人员中的交流与沟通，同时文档的迭代，这个阶段是让所有的人员知道这个产品的核心及功能，交互根据文档出高保真原型，UI根据文档找到产品的表现形式，开发知道产品的核心力体现在哪，技术难题以及实现方式等，测试除了了解产品外对于产品的测试重点及难点掌握。运营则知道这个产品亮点及产品特征等，“好产品是运营出来的”，越早让运营介入产品只有好处。</p>
<h1 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h1><p>“工欲善其事，必先利其器”。从服务器的部署开始，到最后的代码存档迭代，都将是开发人员做为主导的阶段，同时对于产品开发周期的确定。产品经理更多的协助开发了解产品功能，测试需配合开发做单元测试、压力测试等。运营则是更多的是配合内容数据的提供。</p>
<h1 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h1><p>当产品经历过初审，接下来的工作就交给了测试，黑盒、白盒测试，以及三轮产品测试。第一轮测试发现产品bug，第二轮测试围绕着bug、以及优化展开，经过第三轮测试过后产品已经归类为较稳定版本。在三轮测试中测试人员需时刻保持着沟通协作，与技术、产品、UI等，这是个磨合的过程，同时也是质量把关过程。</p>
<h1 id="上线阶段"><a href="#上线阶段" class="headerlink" title="上线阶段"></a>上线阶段</h1><p>这也是beta阶段，这也是开启产品市场的阶段。但在上线前需对产品的代码、系统接口监控、系统维护方案、数据清理等，上线评估阶段需经过市场、产品、运营、开发、测试等对于上线做出整体评估后才能正式上线运营。同时对于上线后的跟踪，日志分析、服务器监控等，同时从日志分析出做出产品调整同时产品运营计划表制定。</p>
<h1 id="磨合阶段"><a href="#磨合阶段" class="headerlink" title="磨合阶段"></a>磨合阶段</h1><p>经过上线阶段的数据分析，以及数据日志的分析，程序等调整，对于产品做出优化，对于用户常见的问题及反馈做出调整，这阶段更多的是产品与用户的磨合，做到更好的用户体验。</p>
<h1 id="运营阶段"><a href="#运营阶段" class="headerlink" title="运营阶段"></a>运营阶段</h1><p>软文？广告？产品上线后的工作都将是围绕着用户展开的，如何让用户第一时间用上产品，如何让用户知道产品，如何抓住用户……提供优秀的用户体验，让用户喜欢上产品，爱上产品，离不开产品，这是运营的能力，同时也是运营人员对产品的信任，同时应证一句话“好产品是运营出来的”。为用户提供产品帮助，软件产品更多的是产品使用说明书，而web更多的是FAQ，减少用户“为什么”。</p>
<h1 id="总结阶段"><a href="#总结阶段" class="headerlink" title="总结阶段"></a>总结阶段</h1><p>学会总结，学会分析，学会批评，产品上线后需要对产品做出个阶段的总结，不论是产品上的，还是人员相互配合上的，有摩擦，有不同的见解在产品过程中是常见的，但出发点一定是围绕着产品，提出意见，产品二期改进及规划，这都可以做为总结阶段讨论的重点，以及如何加强沟通协作，如何做好产品运营。<br>产品流程并不是一尘不变的，同时对于不同的产品，会有不同的要求。这样的流程同样适用于做项目，对于很多公司没有UED等组织时，如何高效、快捷的做出产品或完成项目，减少不必要的工作，成为流程简化与规范的基础。8个阶段的相关人员都有相关的侧重点，或许期间还有不同的人员介入，比如市场，比如BOSS，任何一个过程都有可能受到影响 ，这时候需要的是配合、需要的是协作。成功的产品会遇到很多的困难与阻碍，但相信自己的产品只是满足80%用户需求的解决方案，别想100%的压力，没有人会为这100%买单的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;产品从无到有，从一个想法到雏形到上线的产品，都有个过程。不论是产品、运营、开发、测试等都有自己的职责和工作。很多公司都希望将自己的产品流程化，正规化，希望按照一定的流程走下去，想的是哪天哪个职位出现空缺了，直接找个合适的人可以顶替。同时也为以后的产品工作或项目进程都提供一个模版。特别是对于中小型公司来说，当没有UED，当没有产品相关流程时，产品是否能够按时完成，能否高质量的完成，成为很多产品经理和BOSS担忧的事情。&lt;br&gt;
    
    </summary>
    
    
      <category term="PM" scheme="http://yoursite.com/tags/PM/"/>
    
  </entry>
  
  <entry>
    <title>Android 面试搜罗</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-android-interview/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-android-interview/</id>
    <published>2016-12-23T11:55:20.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>同事，leader，朋友、网上碰到的一些面试问题</p>
</blockquote>
<ul>
<li>开机流程</li>
<li>activity启动流程</li>
<li>binder机制</li>
</ul>
<a id="more"></a>
<ul>
<li>View绘制</li>
<li><p>应用怎么监控自己的anr跟crash</p>
</li>
<li><p>内存优化</p>
</li>
<li>内存泄漏场景</li>
<li>View的自定义属性</li>
<li>进程保活</li>
<li>app应用安装流程</li>
<li>挑一个系统service讲解/service种类</li>
<li>应用程序启动的时候默认启动几个线程</li>
<li>设计一个错误码处理模块</li>
<li>电梯算法</li>
<li>省电</li>
<li>实现XML解析器</li>
<li>数据库事务为什么性能比较好</li>
<li>多线程并发的时候会有什么权限问题</li>
<li>sharedpreference实现机制 能不能多进程</li>
<li>主题切换</li>
<li>jce是什么</li>
<li>viewStub原理</li>
<li>插件实现</li>
<li>事件分发</li>
<li>Unicode与UTF8区别及怎么编码的</li>
<li>http与tcp的区别</li>
<li>https是什么？cookie是什么？cookie能不能在网上传输？</li>
<li>android6.0的权限管理怎么实现的</li>
<li>Android内存回收顺序</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;同事，leader，朋友、网上碰到的一些面试问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开机流程&lt;/li&gt;
&lt;li&gt;activity启动流程&lt;/li&gt;
&lt;li&gt;binder机制&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="interview" scheme="http://yoursite.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>算法-其它</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-arithmetic-other/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-arithmetic-other/</id>
    <published>2016-12-23T11:19:12.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归思想"><a href="#递归思想" class="headerlink" title="递归思想"></a>递归思想</h1><p>观察递归，我们会发现，递归的数学模型其实就是归纳法，这个在高中的数列里面是最常用的了。回忆一下归纳法。  </p>
<a id="more"></a>
<p>归纳法适用于想解决一个问题转化为解决他的子问题，而他的子问题又变成子问题的子问题，而且我们发现这些问题其实都是一个模型，也就是说存在相同的逻辑归纳处理项。当然有一个是例外的，也就是递归结束的哪一个处理方法不适用于我们的归纳处理项，当然也不能适用，否则我们就无穷递归了。这里又引出了一个归纳终结点以及直接求解的表达式。  </p>
<p>如果运用列表来形容归纳法就是：  </p>
<ul>
<li>步进表达式：问题蜕变成子问题的表达式</li>
<li>结束条件：什么时候可以不再是用步进表达式</li>
<li>直接求解表达式：在结束条件下能够直接计算返回值的表达式</li>
<li>逻辑归纳项：适用于一切非适用于结束条件的子问题的处理，当然上面的步进表达式其实就是包含在这里面了。<br>这样其实就结束了，递归也就出来了。  </li>
</ul>
<p>递归算法的一般形式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">( mode)</span></span>&#123;   </div><div class="line">    <span class="keyword">if</span>(endCondition)&#123;</div><div class="line">        constExpression       <span class="comment">//基本项  </span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        accumrateExpreesion /归纳项</div><div class="line">        mode=expression <span class="comment">//步进表达式</span></div><div class="line">        func(mode) / /调用本身，递归</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进;当边界条件满足时，递归返回。<br>注意：</p>
<ul>
<li>(1) 递归就是在过程或函数里调用自身;</li>
<li>(2) 在使用递增归策略时，必须有一个明确的递归结束条件，称为递归出口。</li>
</ul>
<h1 id="递归应用"><a href="#递归应用" class="headerlink" title="递归应用"></a>递归应用</h1><p>递归算法一般用于解决三类问题：</p>
<ul>
<li>(1)数据的定义是按递归定义的。（Fibonacci函数）</li>
<li>(2)问题解法按递归算法实现。（回溯）</li>
<li>(3)数据的结构形式是按递归定义的。（树的遍历，图的搜索）</li>
</ul>
<h1 id="递归的缺点"><a href="#递归的缺点" class="headerlink" title="递归的缺点"></a>递归的缺点</h1><p>递归算法解题相对常用的算法如普通循环等，运行效率较低。因此，应该尽量避免使用递归，除非没有更好的算法或者某种特定情况，递归更为适合的时候。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。递归次数过多容易造成栈溢出等。<br>停止的位置称为 基线条件（base case）。基线条件是递归程序的最底层位置，在此位置时没有必要再进行操作，可以直接返回一个结果。所有递归程序都必须至少拥有一个基线条件，而且必须确保它们最终会达到某个基线条件；否则，程序将永远运行下去，直到程序缺少内存或者栈空间。</p>
<h1 id="颠倒栈"><a href="#颠倒栈" class="headerlink" title="颠倒栈"></a>颠倒栈</h1><p>题目：用递归颠倒一个栈。例如输入栈{1, 2, 3, 4, 5}，1在栈顶。颠倒之后的栈为{5, 4, 3, 2, 1}，5处在栈顶。<br>我们再来考虑怎么递归。我们把栈{1, 2, 3, 4, 5}看成由两部分组成：栈顶元素1和剩下的部分{2, 3, 4, 5}。如果我们能把{2, 3, 4, 5}颠倒过来，变成{5, 4, 3, 2}，然后在把原来的栈顶元素1放到底部，那么就整个栈就颠倒过来了，变成{5, 4, 3, 2, 1}。<br>接下来我们需要考虑两件事情：一是如何把{2, 3, 4, 5}颠倒过来变成{5, 4, 3, 2}。我们只要把{2, 3, 4, 5}看成由两部分组成：栈顶元素2和剩下的部分{3, 4, 5}。我们只要把{3, 4, 5}先颠倒过来变成{5, 4, 3}，然后再把之前的栈顶元素2放到最底部，也就变成了{5, 4, 3, 2}。<br>至于怎么把{3, 4, 5}颠倒过来……很多读者可能都想到这就是递归。也就是每一次试图颠倒一个栈的时候，现在栈顶元素pop出来，再颠倒剩下的元素组成的栈，最后把之前的栈顶元素放到剩下元素组成的栈的底部。递归结束的条件是剩下的栈已经空了。</p>
<p>这种思路的代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">ReverseStack</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;T&gt;&amp; <span class="built_in">stack</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        T top = <span class="built_in">stack</span>.top();</div><div class="line">        <span class="built_in">stack</span>.pop();</div><div class="line">        ReverseStack(<span class="built_in">stack</span>);</div><div class="line">        AddToStackBottom(<span class="built_in">stack</span>, top);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们需要考虑的另外一件事情是如何把一个元素e放到一个栈的底部，也就是如何实现AddToStackBottom。这件事情不难，只需要把栈里原有的元素逐一pop出来。当栈为空的时候，push元素e进栈，此时它就位于栈的底部了。然后再把栈里原有的元素按照pop相反的顺序逐一push进栈。<br>注意到我们在push元素e之前，我们已经把栈里原有的所有元素都pop出来了，我们需要把它们保存起来，以便之后能把他们再push回去。我们当然可以开辟一个数组来做，但这没有必要。由于我们可以用递归来做这件事情，而递归本身就是一个栈结构。我们可以用递归的栈来保存这些元素。  </p>
<p>基于如上分析，我们可以写出AddToStackBottom的代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Add an element to the bottom of a stack:</span></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">AddToStackBottom</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;T&gt;&amp; <span class="built_in">stack</span>, T t)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">stack</span>.push(t);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        T top = <span class="built_in">stack</span>.top();</div><div class="line">        <span class="built_in">stack</span>.pop();</div><div class="line">        AddToStackBottom(<span class="built_in">stack</span>, t);</div><div class="line">        <span class="built_in">stack</span>.push(top);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><p>返回100以内的素数个数问题<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> prime_number_node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> prime_number;</div><div class="line">    prime_number_node* next;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc_prime_number</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    prime_number_node* list_head = <span class="keyword">new</span> prime_number_node();</div><div class="line">    list_head-&gt;next = <span class="literal">NULL</span>;</div><div class="line">    list_head-&gt;prime_number = <span class="number">2</span>;</div><div class="line">    prime_number_node* list_tail = list_head;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> number = <span class="number">3</span> ; number &lt; <span class="number">100</span> ; number++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> remainder;</div><div class="line">        prime_number_node* cur_node_ptr = list_head;</div><div class="line">        <span class="keyword">while</span>(cur_node_ptr != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            remainder = number%cur_node_ptr-&gt;prime_number;</div><div class="line">            <span class="keyword">if</span>(remainder == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//1 break;</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">//2 cur_node_ptr = cur_node_ptr-&gt;next;</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(remainder != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            prime_number_node* new_node_ptr = <span class="keyword">new</span> prime_number_node();</div><div class="line">            new_node_ptr-&gt;prime_number = number;</div><div class="line">            new_node_ptr-&gt;next = <span class="literal">NULL</span>;</div><div class="line">            list_tail-&gt;next = new_node_ptr;</div><div class="line">            <span class="comment">//3 list_tail = list_tail-&gt;next;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(list_head != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        result++;</div><div class="line">        prime_number_node* temp_ptr = list_head;</div><div class="line">        list_head = list_head-&gt;next;</div><div class="line">        <span class="comment">//4 delete temp_ptr;</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里 直接 求 list_head 和 list_tail 的差即可</p>
<h1 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h1><p>题目：输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则输出由字符a、b、c所能排列出来的所有字符串abc、acb、bac、bca、cab和cba。<br>我们以三个字符abc为例来分析一下求字符串排列的过程。首先我们固定第一个字符a，求后面两个字符bc的排列。当两个字符bc的排列求好之后，我们把第一个字符a和后面的b交换，得到bac，接着我们固定第一个字符b，求后面两个字符ac的排列。现在是把c放到第一位置的时候了。记住前面我们已经把原先的第一个字符a和后面的b做了交换，为了保证这次c仍然是和原先处在第一位置的a交换，我们在拿c和第一个字符交换之前，先要把b和a交换回来。在交换b和a之后，再拿c和处在第一位置的a进行交换，得到cba。我们再次固定第一个字符c，求后面两个字符b、a的排列。</p>
<p>既然我们已经知道怎么求三个字符的排列，那么固定第一个字符之后求后面两个字符的排列，就是典型的递归思路了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Permutation</span><span class="params">(<span class="keyword">char</span>* pStr, <span class="keyword">char</span>* pBegin)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span>(!pStr || !pBegin)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">      <span class="comment">// if pBegin points to the end of string,</span></div><div class="line">      <span class="comment">// this round of permutation is finished,</span></div><div class="line">      <span class="comment">// print the permuted string</span></div><div class="line">      <span class="keyword">if</span>(*pBegin == <span class="string">'\0'</span>)</div><div class="line">      &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, pStr);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// otherwise, permute string</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">char</span>* pCh = pBegin; *pCh != <span class="string">'\0'</span>; ++ pCh)</div><div class="line">            &#123;</div><div class="line">                  <span class="comment">// swap pCh and pBegin</span></div><div class="line">                  <span class="keyword">char</span> temp = *pCh;</div><div class="line">                  *pCh = *pBegin;</div><div class="line">                  *pBegin = temp;</div><div class="line">                  Permutation(pStr, pBegin + <span class="number">1</span>);</div><div class="line">                  <span class="comment">// restore pCh and pBegin</span></div><div class="line">                  temp = *pCh;</div><div class="line">                  *pCh = *pBegin;</div><div class="line">                  *pBegin = temp;</div><div class="line">            &#125;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="字符串的组合"><a href="#字符串的组合" class="headerlink" title="字符串的组合"></a>字符串的组合</h1><p>题目：输入一个字符串，输出该字符串中字符的所有组合。举个例子，如果输入abc，它的组合有a、b、c、ab、ac、bc、abc。<br>假设我们想在长度为n的字符串中求m个字符的组合。我们先从头扫描字符串的第一个字符。针对第一个字符，我们有两种选择：一是把这个字符放到组合中去，接下来我们需要在剩下的n-1个字符中选取m-1个字符；而是不把这个字符放到组合中去，接下来我们需要在剩下的n-1个字符中选择m个字符。这两种选择都很容易用递归实现。</p>
<p>下面是这种思路的参考代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Combination</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">string</span>)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(<span class="built_in">string</span> == <span class="literal">NULL</span>)</div><div class="line">       <span class="keyword">return</span>;</div><div class="line"></div><div class="line">   <span class="keyword">int</span> length = <span class="built_in">strlen</span>(<span class="built_in">string</span>);</div><div class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; result;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length; ++ i)</div><div class="line">   &#123;</div><div class="line">       Combination(<span class="built_in">string</span>, i, result);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Combination</span><span class="params">(<span class="keyword">char</span>* <span class="built_in">string</span>, <span class="keyword">int</span> number, <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; result)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">if</span>(number == <span class="number">0</span>)</div><div class="line">   &#123;</div><div class="line">       <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::iterator iter = result.begin();</div><div class="line">       <span class="keyword">for</span>(; iter &lt; result.end(); ++ iter)</div><div class="line">           <span class="built_in">printf</span>(<span class="string">"%c"</span>, *iter);</div><div class="line">           <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span>(*<span class="built_in">string</span> == <span class="string">'\0'</span>)</div><div class="line">       <span class="keyword">return</span>;</div><div class="line"></div><div class="line">   result.push_back(*<span class="built_in">string</span>);</div><div class="line">   Combination(<span class="built_in">string</span> + <span class="number">1</span>, number - <span class="number">1</span>, result);</div><div class="line">   result.pop_back();</div><div class="line"></div><div class="line">   Combination(<span class="built_in">string</span> + <span class="number">1</span>, number, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于组合可以是1个字符的组合，2个字符的字符……一直到n个字符的组合，因此在函数void Combination(char* string)，我们需要一个for循环。另外，我们一个vector来存放选择放进组合里的字符。</p>
<h1 id="memcpy默认实现"><a href="#memcpy默认实现" class="headerlink" title="memcpy默认实现"></a>memcpy默认实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memcpy1</span><span class="params">(<span class="keyword">void</span> *desc, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>((desc == <span class="literal">NULL</span>) &amp;&amp; (src == <span class="literal">NULL</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *desc1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)desc;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *src1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)src;</div><div class="line">    <span class="keyword">while</span>(size-- &gt;<span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        *desc1 = *src1;</div><div class="line">        desc1++;</div><div class="line">        src1++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> desc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="memcpy升级版本-处理重叠"><a href="#memcpy升级版本-处理重叠" class="headerlink" title="memcpy升级版本-处理重叠"></a>memcpy升级版本-处理重叠</h1><p>标准memcpy()的解释：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> n)</span></span>;</div><div class="line"><span class="comment">//If copying takes place between objects that overlap, the behavior is undefined.</span></div></pre></td></tr></table></figure></p>
<p>注意下面的注释，对于地址重叠的情况，该函数的行为是未定义的。</p>
<p>另外，标准库也提供了地址重叠时的内存拷贝函数：memmove()，那么为什么还要考虑重写memcpy()函数呢?</p>
<p>因为memmove()函数的实现效率问题，该函数把源字符串拷贝到临时buf里，然后再从临时buf里写到目的地址，增加了一次不必要的开销。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Memcpy</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> size)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">"abcdefghijk"</span>;</div><div class="line">    <span class="comment">//memcpy(buf+2, buf, 5);</span></div><div class="line">    Memcpy(buf+<span class="number">2</span>, buf, <span class="number">5</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf+<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">Memcpy</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *psrc;</div><div class="line">    <span class="keyword">char</span> *pdst;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == dst || <span class="literal">NULL</span> == src)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>((src &lt; dst) &amp;&amp; (<span class="keyword">char</span> *)src + size &gt; (<span class="keyword">char</span> *)dst) <span class="comment">// 自后向前拷贝</span></div><div class="line">    &#123;</div><div class="line">        psrc = (<span class="keyword">char</span> *)src + size - <span class="number">1</span>;</div><div class="line">        pdst = (<span class="keyword">char</span> *)dst + size - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(size--)</div><div class="line">        &#123;</div><div class="line">            *pdst-- = *psrc--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        psrc = (<span class="keyword">char</span> *)src;</div><div class="line">        pdst = (<span class="keyword">char</span> *)dst;</div><div class="line">        <span class="keyword">while</span>(size--)</div><div class="line">        &#123;</div><div class="line">            *pdst++ = *psrc++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用Memcpy()的结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abcdehijk</div></pre></td></tr></table></figure></p>
<p>使用memcpy()的结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abadehijk</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;递归思想&quot;&gt;&lt;a href=&quot;#递归思想&quot; class=&quot;headerlink&quot; title=&quot;递归思想&quot;&gt;&lt;/a&gt;递归思想&lt;/h1&gt;&lt;p&gt;观察递归，我们会发现，递归的数学模型其实就是归纳法，这个在高中的数列里面是最常用的了。回忆一下归纳法。  &lt;/p&gt;
    
    </summary>
    
      <category term="arithmetic" scheme="http://yoursite.com/categories/arithmetic/"/>
    
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>算法-树</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-arithmetic-tree/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-arithmetic-tree/</id>
    <published>2016-12-23T11:18:22.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="判断平衡二叉树"><a href="#判断平衡二叉树" class="headerlink" title="判断平衡二叉树"></a>判断平衡二叉树</h1><p>题目：输入一棵二叉树的根结点，判断该树是不是平衡二叉树。如果某二叉树中任意结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>
<a id="more"></a>
<p>在遍历树的每个结点的时候，调用函数TreeDepth得到它的左右子树的深度。如果每个结点的左右子树的深度相差都不超过1，按照定义它就是一棵平衡的二叉树。<br>这种思路对应的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBalanced</span><span class="params">(BinaryTreeNode* pRoot)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pRoot == <span class="literal">NULL</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left = TreeDepth(pRoot-&gt;m_pLeft);</div><div class="line">    <span class="keyword">int</span> right = TreeDepth(pRoot-&gt;m_pRight);</div><div class="line">    <span class="keyword">int</span> diff = left - right;</div><div class="line">    <span class="keyword">if</span>(diff &gt; <span class="number">1</span> || diff &lt; <span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> IsBalanced(pRoot-&gt;m_pLeft) &amp;&amp; IsBalanced(pRoot-&gt;m_pRight);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码固然简洁，但我们也要注意到由于一个节点会被重复遍历多次，这种思路的时间效率不高。例如在函数IsBalance中输入上图中的二叉树，首先判断根结点（值为1的结点）的左右子树是不是平衡结点。此时我们将往函数TreeDepth输入左子树根结点（值为2的结点），需要遍历结点4、5、7。接下来判断以值为2的结点为根结点的子树是不是平衡树的时候，仍然会遍历结点4、5、7。毫无疑问，重复遍历同一个结点会影响性能。接下来我们寻找不需要重复遍历的算法。<br>如果我们用后序遍历的方式遍历二叉树的每一个结点，在遍历到一个结点之前我们已经遍历了它的左右子树。只要在遍历每个结点的时候记录它的深度（某一结点的深度等于它到叶节点的路径的长度），我们就可以一边遍历一边判断每个结点是不是平衡的。<br>下面是这种思路的参考代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBalanced</span><span class="params">(BinaryTreeNode* pRoot, <span class="keyword">int</span>* pDepth)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(pRoot == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        *pDepth = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> left, right;</div><div class="line">    <span class="keyword">if</span>(IsBalanced(pRoot-&gt;m_pLeft, &amp;left)</div><div class="line">        &amp;&amp; IsBalanced(pRoot-&gt;m_pRight, &amp;right))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> diff = left - right;</div><div class="line">        <span class="keyword">if</span>(diff &lt;= <span class="number">1</span> &amp;&amp; diff &gt;= <span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            *pDepth = <span class="number">1</span> + (left &gt; right ? left : right);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们只需要给上面的函数传入二叉树的根结点以及一个表示结点深度的整形变量就可以了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsBalanced</span><span class="params">(BinaryTreeNode* pRoot)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> IsBalanced(pRoot, &amp;depth);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的代码中，我们用后序遍历的方式遍历整棵二叉树。在遍历某结点的左右子结点之后，我们可以根据它的左右子结点的深度判断它是不是平衡的，并得到当前结点的深度。当最后遍历到树的根结点的时候，也就判断了整棵二叉树是不是平衡二叉树了。</p>
<h1 id="从上到下遍历二元树"><a href="#从上到下遍历二元树" class="headerlink" title="从上到下遍历二元树"></a>从上到下遍历二元树</h1><p>输入一颗二元树，从上往下按层打印树的每个结点，同一层中按照从左往右的顺序打印<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">     <span class="number">8</span></div><div class="line">   /  \</div><div class="line">  <span class="number">6</span>    <span class="number">10</span></div><div class="line"> / \   / \</div><div class="line"><span class="number">5</span>  <span class="number">7</span>   <span class="number">9</span>  <span class="number">11</span></div><div class="line">输出 <span class="number">8</span>   <span class="number">6</span>   <span class="number">10</span>   <span class="number">5</span>   <span class="number">7</span>   <span class="number">9</span>   <span class="number">11</span>。</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintFromTopToBottom</span><span class="params">(BTreeNode *pTreeRoot)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span>(!pTreeRoot)</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      <span class="comment">// get a empty queue</span></div><div class="line">      <span class="built_in">deque</span>&lt;BTreeNode *&gt; dequeTreeNode;</div><div class="line"></div><div class="line">      <span class="comment">// insert the root at the tail of queue</span></div><div class="line">      dequeTreeNode.push_back(pTreeRoot);</div><div class="line"></div><div class="line">      <span class="keyword">while</span>(dequeTreeNode.size())</div><div class="line">      &#123;</div><div class="line">            <span class="comment">// get a node from the head of queue</span></div><div class="line">            BTreeNode *pNode = dequeTreeNode.front();</div><div class="line">            dequeTreeNode.pop_front();</div><div class="line"></div><div class="line">            <span class="comment">// print the node</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; pNode-&gt;m_nValue &lt;&lt; <span class="string">' '</span>;</div><div class="line"></div><div class="line">            <span class="comment">// print its left child sub-tree if it has</span></div><div class="line">            <span class="keyword">if</span>(pNode-&gt;m_pLeft)</div><div class="line">                  dequeTreeNode.push_back(pNode-&gt;m_pLeft);</div><div class="line"></div><div class="line">            <span class="comment">// print its right child sub-tree if it has</span></div><div class="line">            <span class="keyword">if</span>(pNode-&gt;m_pRight)</div><div class="line">                  dequeTreeNode.push_back(pNode-&gt;m_pRight);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="二叉树后序遍历"><a href="#二叉树后序遍历" class="headerlink" title="二叉树后序遍历"></a>二叉树后序遍历</h1><p>题目：输入一个整数数组，判断该数组是不是某二元查找树的后序遍历的结果。如果是返回true，否则返回false。<br>例如输入5、7、6、9、11、10、8，由于这一整数序列是如下树的后序遍历结果：因此返回true。<br>如果输入7、4、6、5，没有哪棵树的后序遍历的结果是这个序列，因此返回false。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">         <span class="number">8</span></div><div class="line">       /  \</div><div class="line">      <span class="number">6</span>    <span class="number">10</span></div><div class="line">    / \    / \</div><div class="line">   <span class="number">5</span>   <span class="number">7</span>   <span class="number">9</span>  <span class="number">11</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">verifySquenceOfBST</span><span class="params">(<span class="keyword">int</span> squence[], <span class="keyword">int</span> length)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span>(squence == <span class="literal">NULL</span> || length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      <span class="comment">// root of a BST is at the end of post order traversal squence</span></div><div class="line">      <span class="keyword">int</span> root = squence[length - <span class="number">1</span>];</div><div class="line">      <span class="comment">// the nodes in left sub-tree are less than the root</span></div><div class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(; i &lt; length - <span class="number">1</span>; ++ i)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">if</span>(squence[i] &gt; root)</div><div class="line">                  <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// the nodes in the right sub-tree are greater than the root</span></div><div class="line">      <span class="keyword">int</span> j = i;</div><div class="line">      <span class="keyword">for</span>(; j &lt; length - <span class="number">1</span>; ++ j)</div><div class="line">      &#123;</div><div class="line">            <span class="keyword">if</span>(squence[j] &lt; root)</div><div class="line">                  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// verify whether the left sub-tree is a BST</span></div><div class="line">      <span class="keyword">bool</span> left = <span class="literal">true</span>;</div><div class="line">      <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</div><div class="line">            left = verifySquenceOfBST(squence, i);</div><div class="line">      <span class="comment">// verify whether the right sub-tree is a BST</span></div><div class="line">      <span class="keyword">bool</span> right = <span class="literal">true</span>;</div><div class="line">      <span class="keyword">if</span>(i &lt; length - <span class="number">1</span>)</div><div class="line">            right = verifySquenceOfBST(squence + i, length - i - <span class="number">1</span>);</div><div class="line">      <span class="keyword">return</span> (left &amp;&amp; right);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="二元查找树的深度"><a href="#二元查找树的深度" class="headerlink" title="二元查找树的深度"></a>二元查找树的深度</h1><p>题目：输入一棵二元树的根结点，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(SBinaryTreeNode *pTreeNode)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="comment">// the depth of a empty tree is 0</span></div><div class="line">      <span class="keyword">if</span>(!pTreeNode)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      <span class="comment">// the depth of left sub-tree</span></div><div class="line">      <span class="keyword">int</span> nLeft = TreeDepth(pTreeNode-&gt;m_pLeft);</div><div class="line">      <span class="comment">// the depth of right sub-tree</span></div><div class="line">      <span class="keyword">int</span> nRight = TreeDepth(pTreeNode-&gt;m_pRight);</div><div class="line">      <span class="comment">// depth is the binary tree</span></div><div class="line">      <span class="keyword">return</span> (nLeft &gt; nRight) ? (nLeft + <span class="number">1</span>) : (nRight + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二元查找树的镜像"><a href="#二元查找树的镜像" class="headerlink" title="二元查找树的镜像"></a>二元查找树的镜像</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MirrorRecursively</span><span class="params">(BSTreeNode *pNode)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span>(!pNode)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">      <span class="comment">// swap the right and left child sub-tree</span></div><div class="line">      BSTreeNode *pTemp = pNode-&gt;m_pLeft;</div><div class="line">      pNode-&gt;m_pLeft = pNode-&gt;m_pRight;</div><div class="line">      pNode-&gt;m_pRight = pTemp;</div><div class="line">      <span class="comment">// mirror left child sub-tree if not null</span></div><div class="line">      <span class="keyword">if</span>(pNode-&gt;m_pLeft)</div><div class="line">            MirrorRecursively(pNode-&gt;m_pLeft);  </div><div class="line">      <span class="comment">// mirror right child sub-tree if not null</span></div><div class="line">      <span class="keyword">if</span>(pNode-&gt;m_pRight)</div><div class="line">            MirrorRecursively(pNode-&gt;m_pRight);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最大-小堆"><a href="#最大-小堆" class="headerlink" title="最大/小堆"></a>最大/小堆</h1><p>100w个数中找出最大/i小的的100个数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;判断平衡二叉树&quot;&gt;&lt;a href=&quot;#判断平衡二叉树&quot; class=&quot;headerlink&quot; title=&quot;判断平衡二叉树&quot;&gt;&lt;/a&gt;判断平衡二叉树&lt;/h1&gt;&lt;p&gt;题目：输入一棵二叉树的根结点，判断该树是不是平衡二叉树。如果某二叉树中任意结点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。&lt;/p&gt;
    
    </summary>
    
      <category term="arithmetic" scheme="http://yoursite.com/categories/arithmetic/"/>
    
    
      <category term="tree" scheme="http://yoursite.com/tags/tree/"/>
    
  </entry>
  
  <entry>
    <title>算法-链表</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-arithmetic-linklist/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-arithmetic-linklist/</id>
    <published>2016-12-23T11:18:04.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从尾到头输出链表"><a href="#从尾到头输出链表" class="headerlink" title="从尾到头输出链表"></a>从尾到头输出链表</h1><p>题目：输入一个链表的头结点，从尾到头反过来输出每个结点的值。<br><a id="more"></a><br>从头到尾遍历链表，每经过一个结点的时候，把该结点放到一个栈中。当遍历完整个链表后，再从栈顶开始输出结点的值，此时输出的结点的顺序已经反转过来了。该方法需要维护一个额外的栈，实现起来比较麻烦。<br>既然想到了栈来实现这个函数，而递归本质上就是一个栈结构。于是很自然的又想到了用递归来实现。要实现反过来输出链表，我们每访问到一个结点的时候，先递归输出它后面的结点，再输出该结点自身，这样链表的输出结果就反过来了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintListReversely</span><span class="params">(ListNode* pListHead)</span></span></div><div class="line">&#123;</div><div class="line">      <span class="keyword">if</span>(pListHead != <span class="literal">NULL</span>)</div><div class="line">      &#123;</div><div class="line">            <span class="comment">// Print the next node first</span></div><div class="line">            <span class="keyword">if</span> (pListHead-&gt;m_pNext != <span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">                  PrintListReversely(pListHead-&gt;m_pNext);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Print this node</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, pListHead-&gt;m_nKey);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="寻找链表的第n个节点"><a href="#寻找链表的第n个节点" class="headerlink" title="寻找链表的第n个节点"></a>寻找链表的第n个节点</h1><h1 id="单链表差集"><a href="#单链表差集" class="headerlink" title="单链表差集"></a>单链表差集</h1><p>已知集合A和B的元素分别用不含头结点的单链表存储，函数difference()用于求解集合A与B的差集，并将结果保存在集合A的单链表中。<br>例如，若集合A={5,10,20,15,25,30}，集合B={5,15,35,25}，完成计算后A={10,20,30}。<br>链表结点的结构类型定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> elem;</div><div class="line">    node* next;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">difference</span><span class="params">(node** LA , node* LB)</span></span></div><div class="line">&#123;</div><div class="line">    node *pa , *pb , *pre , *q;</div><div class="line">    pre = <span class="literal">NULL</span>;</div><div class="line">    pa = *LA; <span class="comment">//1</span></div><div class="line">    <span class="keyword">while</span>(pa)</div><div class="line">    &#123;</div><div class="line">        pb = LB;</div><div class="line">        <span class="keyword">while</span>( pb &amp;&amp; ( pa-&gt;elem != pb-&gt;elem ) )            <span class="comment">//2</span></div><div class="line">            pb = pb-&gt;next;</div><div class="line">        <span class="keyword">if</span>( pb )                           <span class="comment">//3</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>( !pre )</div><div class="line">                *LA = pa-&gt;next ;        <span class="comment">//4</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">                pre = pa-&gt;next;         <span class="comment">//5</span></div><div class="line">            q = pa;</div><div class="line">            pa = pa-&gt;next;</div><div class="line">            <span class="built_in">free</span>(q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            pre = pa;                 <span class="comment">//6</span></div><div class="line">            pa = pa-&gt;next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从尾到头输出链表&quot;&gt;&lt;a href=&quot;#从尾到头输出链表&quot; class=&quot;headerlink&quot; title=&quot;从尾到头输出链表&quot;&gt;&lt;/a&gt;从尾到头输出链表&lt;/h1&gt;&lt;p&gt;题目：输入一个链表的头结点，从尾到头反过来输出每个结点的值。&lt;br&gt;
    
    </summary>
    
      <category term="arithmetic" scheme="http://yoursite.com/categories/arithmetic/"/>
    
    
      <category term="linklist" scheme="http://yoursite.com/tags/linklist/"/>
    
  </entry>
  
  <entry>
    <title>算法-排序</title>
    <link href="http://yoursite.com/2016/12/23/2016-12-23-arithmetic-sort/"/>
    <id>http://yoursite.com/2016/12/23/2016-12-23-arithmetic-sort/</id>
    <published>2016-12-23T11:17:29.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="http://blog.jobbole.com/11745/" target="_blank" rel="external">视觉直观感受 7 种常用的排序算法</a></li>
</ul>
<a id="more"></a>
<p>头文件如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FALSE 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL (void*)0</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</div></pre></td></tr></table></figure></p>
<h1 id="交换两个变量的值"><a href="#交换两个变量的值" class="headerlink" title="交换两个变量的值"></a>交换两个变量的值</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    a = a + b - (b = a);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    b = a + (a = b) * <span class="number">0</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    a = a + b;</div><div class="line">    b = a - b;</div><div class="line">    a = a - b;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">    a = a * b;</div><div class="line">    b = a / b;</div><div class="line">    a = a / b;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> 1</span></div><div class="line">    a = a ^ b;</div><div class="line">    b = a ^ b;</div><div class="line">    a = a ^ b;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）稳定</div><div class="line">    2）空间代价：O(1)</div><div class="line">    3）时间代价：</div><div class="line">步骤:</div><div class="line">    1、从第一个元素开始，该元素可以认为已经被排序</div><div class="line">    2、取出下一个元素，在已经排序的元素序列中从后向前扫描</div><div class="line">    3、如果该元素（已排序）大于新元素，将该元素移到下一位置</div><div class="line">    4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</div><div class="line">    5、将新元素插入到该位置后</div><div class="line">    6、重复步骤2~5</div><div class="line">*/</div><div class="line"><span class="function">Status <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">array</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, temp;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        temp = <span class="built_in">array</span>[i];</div><div class="line">        j = i<span class="number">-1</span>;    <span class="comment">//key1. before the current location</span></div><div class="line">        <span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (<span class="built_in">array</span>[j] &gt; temp))</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">array</span>[j+<span class="number">1</span>] = <span class="built_in">array</span>[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">array</span>[j+<span class="number">1</span>] = temp;  <span class="comment">//key2. pay attention to 'j+1'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）稳定</div><div class="line">    2）空间代价：O(1)</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    1、从第一个元素开始，该元素可以认为已经被排序</div><div class="line">    2、取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置</div><div class="line">    3、将新元素插入到该位置后</div><div class="line">    4、重复上述两步</div><div class="line">*/</div><div class="line"><span class="function">Status <span class="title">BinInsertSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">array</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, temp, left, right, mid;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++)</div><div class="line">    &#123;</div><div class="line">        temp = <span class="built_in">array</span>[i];</div><div class="line">        left = <span class="number">0</span>;</div><div class="line">        right = i<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span> (left &lt;= right)</div><div class="line">        &#123;</div><div class="line">            mid = (left + right)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[mid] &gt; temp)</div><div class="line">                right = mid<span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                left = mid+<span class="number">1</span>;</div><div class="line">        &#125;<span class="comment">//key. 此时left肯定就是待插入的位置坐标</span></div><div class="line">        <span class="keyword">for</span> (j = i<span class="number">-1</span>; j &gt; left; j--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">array</span>[j+<span class="number">1</span>] = <span class="built_in">array</span>[j];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">array</span>[left] = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）</div><div class="line">    2）空间代价：</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    1、先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。</div><div class="line">    2、所有距离为d1的倍数的记录放在同一个组中，在各组内进行直接插入排序。</div><div class="line">    3、取第二个增量d2&lt;d1重复上述的分组和排序，</div><div class="line">    4、直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)，即所有记录放在同一组中进行直接插入排序为止。</div><div class="line">*/</div><div class="line"><span class="function">Status <span class="title">ShellSort1</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, k, gap, temp;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (gap = len/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) <span class="comment">//步长</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; gap; i++) <span class="comment">//直接插入排序 - 执行 gap 趟</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (j = i + gap; j &lt; len; j += gap)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[j - gap])</div><div class="line">                &#123;</div><div class="line">                    temp = <span class="built_in">array</span>[j];</div><div class="line">                    k = j - gap;</div><div class="line">                    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">array</span>[k] &gt; temp)</div><div class="line">                    &#123;</div><div class="line">                        <span class="built_in">array</span>[k + gap] = <span class="built_in">array</span>[k];</div><div class="line">                        k -= gap;</div><div class="line">                    &#125;</div><div class="line">                    <span class="built_in">array</span>[k + gap] = temp;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）稳定</div><div class="line">    2）空间代价：O(1)</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    1、初始状态：无序区为R[1..n]，有序区为空。</div><div class="line">    2、第i趟排序(i=1,2,3...n-1)</div><div class="line">       第i趟排序开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。</div><div class="line">       该趟排序从当前无序区中选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，</div><div class="line">       使R[1..i]和R分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区。</div><div class="line">    3、前n-1趟结束，数组有序化了</div><div class="line">*/</div><div class="line"><span class="function">Status <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">array</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j, min;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</div><div class="line">    &#123;</div><div class="line">        min = i;</div><div class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; len; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[min] &gt; <span class="built_in">array</span>[j]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Swap(<span class="built_in">array</span>[i], <span class="built_in">array</span>[min]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）</div><div class="line">    2）空间代价：</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    一般都用数组来表示堆，i结点的父结点下标为(i-1)/2，左右子结点的下标分别为 2*i + 1和 2*i + 2</div><div class="line">    堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。</div><div class="line">    堆即是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</div><div class="line">1. 什么是堆?</div><div class="line">    我们这里提到的堆一般都指的是二叉堆，它满足二个特性：</div><div class="line">        1&gt;父结点的键值总是大于或等于（小于或等于）任何一个子节点的键值</div><div class="line">        2&gt;每个结点的左子树和右子树都是一个二叉堆（都是最大堆或最小堆）</div><div class="line">2、什么是堆调整(Heap Adjust)？</div><div class="line">    这是为了保持堆的特性而做的一个操作。对某一个节点为根的子树做堆调整，其实就是将该根节点进行“下沉”操作</div><div class="line">    (具体是通过和子节点交换完成的)，一直下沉到合适的位置，使得刚才的子树满足堆的性质。</div><div class="line">    例如对最大堆的堆调整我们会这么做：</div><div class="line">        1、在对应的数组元素A[i], 左孩子A[LEFT(i)], 和右孩子A[RIGHT(i)]中找到最大的那一个，将其下标存储在largest中。</div><div class="line">        2、如果A[i]已经就是最大的元素，则程序直接结束。</div><div class="line">        3、否则，i的某个子结点为最大的元素，将A[largest]与A[i]交换。</div><div class="line">        4、再从交换的子节点开始，重复1,2,3步，直至叶子节点，算完成一次堆调整。</div><div class="line">    这里需要提一下的是，一般做一次堆调整的时间复杂度为log(n)。</div><div class="line">3、如何建堆?</div><div class="line">    建堆是一个通过不断的堆调整，使得整个二叉树中的数满足堆性质的操作。</div><div class="line">    在数组中的话，我们一般从下标为n/2的数开始做堆调整，一直到下标为0的数</div><div class="line">    (因为下标大于n/2的数都是叶子节点，其子树已经满足堆的性质了)</div><div class="line">4、如何进行堆排序 ?</div><div class="line">    堆排序是在上述3中对数组建堆的操作之后完成的。</div><div class="line">    数组储存成堆的形式之后，第一次将A[0]与A[n - 1]交换，再对A[0…n-2]重新恢复堆。</div><div class="line">    第二次将A[0]与A[n-2]交换，再对A[0…n-3]重新恢复堆，重复这样的操作直到A[0]与A[1]交换。</div><div class="line">    由于每次都是将最小的数据并入到后面的有序区间，故操作完成后整个数组就有序了 */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)<span class="built_in">floor</span>((i - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">2</span> * i + <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> right(<span class="keyword">int</span> i)&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">2</span> * i + <span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> HeapAdjust(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> i, <span class="keyword">int</span> heap_size)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）稳定</div><div class="line">    2）空间代价：</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。</div><div class="line">    2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</div><div class="line">    3、针对所有的元素重复以上的步骤，除了最后一个。</div><div class="line">    4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</div><div class="line">*/</div><div class="line"><span class="function">Status <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> len)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == <span class="built_in">array</span>) &#123;</div><div class="line">        <span class="keyword">return</span> ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">for</span> (i = len; i &gt; <span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i<span class="number">-1</span>; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[j] &gt; <span class="built_in">array</span>[j+<span class="number">1</span>]) <span class="comment">//key 最大的数据沉底</span></div><div class="line">            &#123;</div><div class="line">                Swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j+<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">性能:</div><div class="line">    1）稳定</div><div class="line">    2）空间代价：</div><div class="line">    2）时间间代价：</div><div class="line">步骤:</div><div class="line">    1、从数列中挑出一个元素，称为 "基准"（pivot），</div><div class="line">    2、重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</div><div class="line">    3、递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span>* data, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pivotkey = low;</div><div class="line">    <span class="keyword">while</span> (low &lt; high)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; data[high] &gt; data[pivotkey]) &#123;</div><div class="line">            high--;</div><div class="line">        &#125;</div><div class="line">        Swap(data[low], data[high]);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; data[low] &lt; data[pivotkey]) &#123;</div><div class="line">            low++;</div><div class="line">        &#125;</div><div class="line">        Swap(data[low], data[high]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> low;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Status <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pivot;</div><div class="line">    <span class="keyword">if</span> (low &lt; high)</div><div class="line">    &#123;</div><div class="line">        pivot = Partition(<span class="built_in">array</span>, low, high);</div><div class="line">        QuickSort(<span class="built_in">array</span>, low, pivot<span class="number">-1</span>);</div><div class="line">        QuickSort(<span class="built_in">array</span>, pivot+<span class="number">1</span>, high);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> OK;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="归并排序类"><a href="#归并排序类" class="headerlink" title="归并排序类"></a>归并排序类</h1>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.jobbole.com/11745/&quot;&gt;视觉直观感受 7 种常用的排序算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="arithmetic" scheme="http://yoursite.com/categories/arithmetic/"/>
    
    
      <category term="sort" scheme="http://yoursite.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Sport 运动主体架构</title>
    <link href="http://yoursite.com/2016/12/22/2016-12-22-sport-architecture/"/>
    <id>http://yoursite.com/2016/12/22/2016-12-22-sport-architecture/</id>
    <published>2016-12-22T09:49:38.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要介绍运动App的四方通讯架构</p>
</blockquote>
<a id="more"></a>
<p>主体交互图如下：<br><img src="/images/201612/20161222-sport01.jpg" alt=""></p>
<h1 id="手机运动PhoeSport"><a href="#手机运动PhoeSport" class="headerlink" title="手机运动PhoeSport"></a>手机运动PhoeSport</h1><blockquote>
<p>数据展示区 - 手机端 - 运动数据轨迹，记录，成就表展示</p>
</blockquote>
<h1 id="手机通讯端PhoneProxy"><a href="#手机通讯端PhoneProxy" class="headerlink" title="手机通讯端PhoneProxy"></a>手机通讯端PhoneProxy</h1><blockquote>
<p>手表通讯代理，与手表蓝牙通讯，与PhoeSport之间aidl</p>
</blockquote>
<h2 id="接受消息类型"><a href="#接受消息类型" class="headerlink" title="接受消息类型"></a>接受消息类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CMD_WATCH_SET_RUNNINT_DATA                  <span class="comment">//Wear主动向Phone发送运动数据</span></div><div class="line">CMD_WATCH_ACTIVE_GET_RUNNING_RECORD         <span class="comment">//Wear端主动向Phone端请求Record</span></div></pre></td></tr></table></figure>
<h1 id="手表通讯端WearProxy"><a href="#手表通讯端WearProxy" class="headerlink" title="手表通讯端WearProxy"></a>手表通讯端WearProxy</h1><blockquote>
<p>手机通讯代理，与手机蓝牙通讯，与WearSport之间aidl</p>
</blockquote>
<h2 id="接受消息类型-1"><a href="#接受消息类型-1" class="headerlink" title="接受消息类型"></a>接受消息类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CMD_WATCH_SEND_RUNNINT_DATA_SUCCESS         <span class="comment">//运动数据发送Phone端成功的回复</span></div><div class="line">CMD_WATCH_SEND_RUNNINT_DATA_FAIL            <span class="comment">//运动数据发送Phone端失败的回复</span></div><div class="line">CMD_SEND_HEARTRATE_TRAIN_DATA_SUSCESS       <span class="comment">//心率数据发送Phone端成功的回复</span></div><div class="line">CMD_SEND_HEARTRATE_TRAIN_DATA_FAIL          <span class="comment">//心率数据发送Phone端失败的回复</span></div><div class="line">CMD_PHONE_GET_RUNNING_DATA                  <span class="comment">//Phone端主动请求数据</span></div><div class="line">CMD_PHONE_SEND_RUNNING_RECORD               <span class="comment">//Phone端主动发送Record</span></div><div class="line">CMD_PHONE_SEND_RUNNING_SETTING              <span class="comment">//Phone端主动发送设置</span></div></pre></td></tr></table></figure>
<h1 id="手表运动WearSport"><a href="#手表运动WearSport" class="headerlink" title="手表运动WearSport"></a>手表运动WearSport</h1><blockquote>
<p>数据采集 - 手表端 - 运动数据采集，心率数据采集</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要介绍运动App的四方通讯架构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="works" scheme="http://yoursite.com/categories/works/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Git 命令速查</title>
    <link href="http://yoursite.com/2016/12/18/2016-12-18-git-study/"/>
    <id>http://yoursite.com/2016/12/18/2016-12-18-git-study/</id>
    <published>2016-12-18T08:18:21.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Git常用命令速查表  </p>
</blockquote>
<h1 id="配置用户名邮箱"><a href="#配置用户名邮箱" class="headerlink" title="配置用户名邮箱"></a>配置用户名邮箱</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"jingtalk"</span></div><div class="line">git config --global user.email <span class="string">"jinghuang1130@yahoo.com"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="配置別名"><a href="#配置別名" class="headerlink" title="配置別名"></a>配置別名</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.check checkout</div><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global alias.last <span class="string">"log -3 HEAD"</span>  <span class="comment">#显示最新提交的3个日志</span></div><div class="line">git config --global alias.di diff</div></pre></td></tr></table></figure>
<h1 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch <span class="_">-d</span> dev</div><div class="line">git branch -D dev <span class="comment">#强制删除</span></div></pre></td></tr></table></figure>
<h1 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r <span class="_">-d</span> origin/dev</div></pre></td></tr></table></figure>
<p>上面只是删除本地对应远程分支的track, 正确做法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :dev</div></pre></td></tr></table></figure></p>
<p>冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支</p>
<h1 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -m dev newdev</div><div class="line">git branch -m | -M oldbranch newbranch  <span class="comment">#重命名分支，如果newbranch名字分支已经存在，则需要使用-M强制重命名，否则，使用-m进行重命名</span></div></pre></td></tr></table></figure>
<p>git重命名远程分支=先删除远程分支，然后重命名本地分支，再推送</p>
<h1 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h1><p>本地新创建了一个local_br 需要推送到远程的 remote_br分支上 (冒号前后不要加空格)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin local_br:remote_br</div></pre></td></tr></table></figure></p>
<h1 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h1><p>在常规开发过程中，经常会遇到这样的问题，dev作为新功能提交分支，每天都有提交代码；而master作为稳定版本分支，可能一个月才提交一次，这样就会遇到dev的很多功能性代码部分合入master的需求，此时为使用cherry-pick的绝佳时机, commit_id为dev分支上提交的commit id<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git cherry-pick &lt;commit_id&gt; <span class="comment">#此步可能会生冲突，但修改冲突的代价远小于代码比对合入</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h1 id="查看代码库地址"><a href="#查看代码库地址" class="headerlink" title="查看代码库地址"></a>查看代码库地址</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure>
<h1 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h1><p>如果想保留仓库原有的文件夹名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/JingTalk/jingtalk.github.io.git</div></pre></td></tr></table></figure></p>
<p>如果想起一个新的名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir jingtalkblog</div><div class="line"><span class="built_in">cd</span> jingtalkblog</div><div class="line">git init</div><div class="line">git remote add origin https://github.com/JingTalk/jingtalk.github.io.git</div><div class="line">git pull origin master</div></pre></td></tr></table></figure></p>
<h1 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h1><p>如果现在已经本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步；首先先在git上建立一个空的仓库jingtalk；然后可以将本地的仓库与jingtalk关联；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/JingTalk/jingtalk.github.io.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
<p>第一次推送master分支时，使用<strong>-u</strong>参数，Git把本地的master分支推送的远程新的master分支，同时把本地的master分支和远程的master分支关联起来，以后只需要下面命令来推送最新修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h1 id="commit撤销"><a href="#commit撤销" class="headerlink" title="commit撤销"></a>commit撤销</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git reset --hard &lt;commit_id&gt; <span class="comment">#彻底回退到某个版本，本地的源码也会变为上一个版本的内容，代码已删除</span></div><div class="line">git reset --hard HEAD^</div><div class="line">git reset --soft&lt;commit_id&gt; <span class="comment">#回退到某个版本，只回退了commit的信息，代码没有删除</span></div><div class="line">git reset --soft HEAD^</div></pre></td></tr></table></figure>
<p>在Git中，用HEAD表示当前版本, 上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD</div><div class="line">git reset --hard HEAD^</div><div class="line">git reset --hard HEAD^^</div></pre></td></tr></table></figure></p>
<h1 id="线上版本回退"><a href="#线上版本回退" class="headerlink" title="线上版本回退"></a>线上版本回退</h1><p>如果你的错误提交已经推送到自己的远程分支了，那么就需要回滚远程分支了。<br>首先要回退本地分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reflog</div><div class="line">git reset --hard commit_id</div></pre></td></tr></table></figure></p>
<p>紧接着强制推送到远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git push <span class="_">-f</span></div><div class="line">// 上面如果执行报错，可以使用下面这种</div><div class="line">git push origin master <span class="_">-f</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支</strong></p>
<h1 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h1><p>可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">F:\git_TOS\wear\twssports (goer_master_GA)</div><div class="line">λ git reflog</div><div class="line">bbb7bc3 HEAD@&#123;0&#125;: cherry-pick: 中英文修改</div><div class="line">58e8584 HEAD@&#123;1&#125;: reset: moving to 58e8584f6f39c84301c9399d3ffe2dfb8fd43231</div><div class="line">0492752 HEAD@&#123;2&#125;: checkout: moving from dev to goer_master_GA</div><div class="line">27d8437 HEAD@&#123;3&#125;: checkout: moving from master to dev</div><div class="line">27d8437 HEAD@&#123;4&#125;: reset: moving to 27d843767ce98fb78faf7a03bfd8509faaa6b519</div><div class="line">f4767fd HEAD@&#123;5&#125;: checkout: moving from dev to master</div><div class="line">27d8437 HEAD@&#123;6&#125;: commit: 静置导致的关闭运动Toast添加运动状态判断</div><div class="line">d402152 HEAD@&#123;7&#125;: checkout: moving from goer_master_GA to dev</div></pre></td></tr></table></figure></p>
<h1 id="暂存修改"><a href="#暂存修改" class="headerlink" title="暂存修改"></a>暂存修改</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash list</div><div class="line">git stash apply</div><div class="line">git stash drop</div><div class="line">git stash clear</div></pre></td></tr></table></figure>
<h1 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div><div class="line">git <span class="built_in">log</span> &lt;file&gt;</div></pre></td></tr></table></figure>
<h1 id="删除git远程库中的文件"><a href="#删除git远程库中的文件" class="headerlink" title="删除git远程库中的文件"></a>删除git远程库中的文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git rm --cached -r gradle.properties</div><div class="line"><span class="comment">#delete gradle.properties in .gitignore</span></div><div class="line">git add .gitignore</div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h1 id="gitignore规则"><a href="#gitignore规则" class="headerlink" title=".gitignore规则"></a>.gitignore规则</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 此为注释 – 将被 Git 忽略</span></div><div class="line">*.a       <span class="comment"># 忽略所有 .a 结尾的文件</span></div><div class="line">!lib.a    <span class="comment"># 但 lib.a 除外</span></div><div class="line">/TODO     <span class="comment"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></div><div class="line">build/    <span class="comment"># 忽略 build/ 目录下的所有文件</span></div><div class="line">doc/*.txt <span class="comment"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></div></pre></td></tr></table></figure>
<p>有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached .</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">'update .gitignore'</span></div></pre></td></tr></table></figure></p>
<h1 id="SSH权限"><a href="#SSH权限" class="headerlink" title="SSH权限"></a>SSH权限</h1><p>通过命令生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥，id_rsa.pub 就是公钥，将后者添加到github、coding.net相应的设置中即可通过ssh方式拉取代码（不用再输入用户名和密码）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C jinghuang1130@yahoo.com</div></pre></td></tr></table></figure></p>
<p>Mac系统下的.ssh文件位于/Users/用户名/.ssh下面</p>
<h1 id="Error问题"><a href="#Error问题" class="headerlink" title="Error问题"></a>Error问题</h1><h2 id="refusing"><a href="#refusing" class="headerlink" title="refusing"></a>refusing</h2><p>git push origin master的时候，有时会报下面的错误<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fatal: refusing to merge unrelated histories</div><div class="line">Error redoing merge 1234deadbeef1234deadbeef</div></pre></td></tr></table></figure></p>
<p>使用 <code>--allow-unrelated-histories</code> 处理，如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master --allow-unrelated-histories</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git常用命令速查表  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;配置用户名邮箱&quot;&gt;&lt;a href=&quot;#配置用户名邮箱&quot; class=&quot;headerlink&quot; title=&quot;配置用户名邮箱&quot;&gt;&lt;/a&gt;配置用户名邮箱&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name &lt;span class=&quot;string&quot;&gt;&quot;jingtalk&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email &lt;span class=&quot;string&quot;&gt;&quot;jinghuang1130@yahoo.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法记录</title>
    <link href="http://yoursite.com/2016/12/02/2016-12-04-markdown/"/>
    <id>http://yoursite.com/2016/12/02/2016-12-04-markdown/</id>
    <published>2016-12-02T14:19:53.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h1 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h1></blockquote>
<p><a href="http://www.kancloud.cn/wizardforcel/markdown-simple-world/97373" target="_blank" rel="external">Markdown 简单的世界</a></p>
<blockquote>
<h1 id="标题说明一"><a href="#标题说明一" class="headerlink" title="标题说明一"></a>标题说明一</h1></blockquote>
<p>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</p>
<a id="more"></a>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>####### 七级标题（最多支持六级标题）</p>
<blockquote>
<h1 id="标题说明二"><a href="#标题说明二" class="headerlink" title="标题说明二"></a>标题说明二</h1></blockquote>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><blockquote>
<h1 id="列表说明"><a href="#列表说明" class="headerlink" title="列表说明"></a>列表说明</h1></blockquote>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 -</p>
<ul>
<li>文本</li>
<li>文本</li>
<li>文本</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>如果你希望有序列表，<br>也可以在文字前面加上 1. 2. 3.</p>
<ol>
<li>文本</li>
<li>文本</li>
<li>文本</li>
</ol>
<blockquote>
<h1 id="引用说明"><a href="#引用说明" class="headerlink" title="引用说明"></a>引用说明</h1></blockquote>
<p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 &gt;</p>
<blockquote>
<p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p>
</blockquote>
<p>注：&gt; 和文本之间要保留一个字符的空格。</p>
<p>嵌套引用如下：</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
</blockquote>
<h1 id="链接说明"><a href="#链接说明" class="headerlink" title="链接说明"></a>链接说明</h1></blockquote>
<h2 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h2><p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <a href="链接地址">显示文本</a> 这样的语法即可</p>
<p><a href="http://www.jianshu.com" target="_blank" rel="external">简书</a></p>
<h2 id="参考式-注意下面的空行"><a href="#参考式-注意下面的空行" class="headerlink" title="参考式(注意下面的空行)"></a>参考式(注意下面的空行)</h2><p><a href="http://www.jianshu.com" target="_blank" rel="external">简书主页</a></p>
<p><a href="http://www.jianshu.com/settings" target="_blank" rel="external">简书设置页</a></p>
<blockquote>
<h1 id="图片说明"><a href="#图片说明" class="headerlink" title="图片说明"></a>图片说明</h1></blockquote>
<p>在 Markdown 中，插入图片不需要其他按钮，你只需要使用 <img src="图片链接地址" alt=""> 这样的语法即可</p>
<p><img src="http://ww4.sinaimg.cn/bmiddle/aa397b7fjw1dzplsgpdw5j.jpg" alt=""></p>
<p>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！</p>
<blockquote>
<h1 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体 斜体"></a>粗体 斜体</h1></blockquote>
<p>Markdown 的粗体和斜体也非常简单，用两个 <em> 包含一段文本就是粗体的语法，用一个 </em> 包含一段文本就是斜体的语法</p>
<p> <em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p>
<blockquote>
<h1 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h1></blockquote>
<p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。</p>
<p>如果引用的语句为多行，可以将<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 一行代码引用（也可以当标记使用）</div><div class="line">`Hello World`</div><div class="line"></div><div class="line">## 多行代码引用</div></pre></td></tr></table></figure></p>
<p>void main()<br>{<br>printf(“Hello, Markdown.”);<br>}<br>```</p>
<h2 id="空格或TAB键实现"><a href="#空格或TAB键实现" class="headerlink" title="空格或TAB键实现"></a>空格或TAB键实现</h2><p>通过在每行加上4个空格或者一个制表符（如同写代码一样）</p>
<p>四个空格</p>
<pre><code>void main()
{
printf(&quot;Hello, Markdown.&quot;);
}
</code></pre><p>TAB键</p>
<pre><code>public void test() {
    ...
}
</code></pre><blockquote>
<h1 id="段落说明"><a href="#段落说明" class="headerlink" title="段落说明"></a>段落说明</h1></blockquote>
<p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。</p>
<blockquote>
<h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1></blockquote>
<p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 或者 — 即可, 如下：</p>
<h2 id=""><a href="#" class="headerlink" title="*"></a><em>*</em></h2><blockquote>
<h1 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠\"></a>反斜杠\</h1><p>相当于反转义作用。使符号成为普通符号</p>
<h1 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h1><p>一行结束时输入两个空格，如下：<br>[上一行没有打空格] 这是第一行<br>[上一行打了空格]这是第二行</p>
<h1 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h1><p>在相应的text前后添加两个=即可</p>
</blockquote>
<p>==DYX==</p>
<blockquote>
<h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p><del>DYX</del></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h1 id=&quot;Markdown简介&quot;&gt;&lt;a href=&quot;#Markdown简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown简介&quot;&gt;&lt;/a&gt;Markdown简介&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kancloud.cn/wizardforcel/markdown-simple-world/97373&quot;&gt;Markdown 简单的世界&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;标题说明一&quot;&gt;&lt;a href=&quot;#标题说明一&quot; class=&quot;headerlink&quot; title=&quot;标题说明一&quot;&gt;&lt;/a&gt;标题说明一&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://yoursite.com/2015/11/21/2015-11-21-hello-hexo/"/>
    <id>http://yoursite.com/2015/11/21/2015-11-21-hello-hexo/</id>
    <published>2015-11-21T08:29:53.000Z</published>
    <updated>2017-05-16T04:37:44.343Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<h2 id="npm-代理"><a href="#npm-代理" class="headerlink" title="npm 代理"></a>npm 代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> https-proxy http://dev-proxy.web.com:8080</div><div class="line">npm config <span class="built_in">set</span> proxy http://dev-proxy.web.com:8080</div></pre></td></tr></table></figure>
<h2 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h2><p>安装完<a href="http://nodejs.cn/" target="_blank" rel="external">node.js</a>后，在本地安装hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>然后下载hexoblog的源码，最后执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo s // 本地发表</div><div class="line">hexo g <span class="_">-d</span> // 发布到相应网站</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
